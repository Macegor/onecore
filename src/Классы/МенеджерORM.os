Перем МенеджерыСущностей;

Процедура ПриСозданииОбъекта()
	
	МенеджерыСущностей = Новый Соответствие();

КонецПроцедуры

Процедура ИнициализироватьМенеджерСущностей(Знач Ключ, Знач ТипКоннектора = Неопределено, Знач СтрокаСоединения = "") Экспорт
	
	Попытка
		
		Если ТипЗнч(ТипКоннектора) = Тип("Строка") Тогда
			ТипКоннектора = Тип(ТипКоннектора);
		КонецЕсли;

		МенеджерСущностей = Новый МенеджерСущностей(ТипКоннектора, СтрокаСоединения);
		МенеджерКомпонентов = Приложение.МенеджерКомпонентов();
		МенеджерОбъектов = Приложение.МенеджерОбъектов();
		
		МенеджерСущностей.ДобавитьКлассВМодель(Тип("OneCoreКолонкаТаблицыМодели"));
		МенеджерСущностей.ДобавитьКлассВМодель(Тип("OneCoreТаблицаМодели"));

		Для Каждого Компонент Из МенеджерКомпонентов.Компоненты() Цикл

			СущностиКРегистрации = Новый ТаблицаЗначений();
			СущностиКРегистрации.Колонки.Добавить("Класс");
			СущностиКРегистрации.Колонки.Добавить("Сортировка");

			Для Каждого ДанныеМодели Из Компонент.МоделиКомпонента() Цикл
				
				ВременныйОбъектМодели = МенеджерОбъектов.СоздатьОбъект(ДанныеМодели.Ключ);
				
				Попытка
					
					АннотацииМетода = Рефлексия.АннотацииМетода(ВременныйОбъектМодели, "ПриСозданииОбъекта");
					
					Если АннотацииМетода.Сущность.Свойство("КлючБазы") Тогда
						
						МассивДоступныхКлючей = СтрРазделить(АннотацииМетода.Сущность.КлючБазы, ",");
						
						Если МассивДоступныхКлючей.Найти(Ключ) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
					КонецЕсли;

					ЗначениеСортировки = Неопределено;
					АннотацииМетода.Сущность.Свойство("Порядок", ЗначениеСортировки);
					
					СтрокаКРегистрации = СущностиКРегистрации.Добавить();
					СтрокаКРегистрации.Класс = ДанныеМодели.Значение;
					СтрокаКРегистрации.Сортировка = ЗначениеСортировки;
					
				Исключение
					Лог.Предупреждение("Класс " + ДанныеМодели.Значение + " не добавлен в модель по причине " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
				ОсвободитьОбъект(ВременныйОбъектМодели);
				
			КонецЦикла;

			СущностиКРегистрации.Сортировать("Сортировка Возр");

			Для каждого Элемент Из СущностиКРегистрации Цикл
				Попытка
					МенеджерСущностей.ДобавитьКлассВМодель(Элемент.Класс);
					Лог.Информация("Класс " + Элемент.Класс + " добавлен в модель");
				Исключение
					Лог.Предупреждение("Класс " + Элемент.Класс + " не добавлен в модель по причине " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			КонецЦикла;
			
		КонецЦикла;
		
		ОбновитьТаблицыБазыДанных(МенеджерСущностей, Ключ);
		МенеджерСущностей.Инициализировать();
		МенеджерыСущностей.Вставить(Ключ, МенеджерСущностей);

		Лог.Информация("Менеджер сущностей по ключу " + Ключ + " успешно инициализирован");
		
	Исключение
		Лог.Ошибка(СтрШаблон("Ошибка инициализации менеджера сущностей по ключу %1 по причине %2", Ключ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
КонецПроцедуры

Функция МенеджерСущностей(Ключ) Экспорт
	Возврат МенеджерыСущностей[Ключ];
КонецФункции

Функция МенеджерыСущностей() Экспорт
	Возврат МенеджерыСущностей;
КонецФункции

Процедура ОбновитьТаблицыБазыДанных(МенеджерСущностей, КлючБазы)
	
	// Создаём таблицу моделей
	ТаблицаМоделей = Новый ТаблицаЗначений();
	ТаблицаМоделей.Колонки.Добавить("ОбъектМодели");
	ТаблицаМоделей.Колонки.Добавить("ТипСущности");
	ТаблицаМоделей.Колонки.Добавить("ИмяТаблицы");

	ТипыСлужебныхМоделей = Новый Массив();
	ТипыСлужебныхМоделей.Добавить(Тип("OneCoreКолонкаТаблицыМодели"));
	ТипыСлужебныхМоделей.Добавить(Тип("OneCoreТаблицаМодели"));

	МодельДанных = Рефлексия.ПолучитьСвойство(МенеджерСущностей, "МодельДанных");
	Модели = Рефлексия.ПолучитьСвойство(МодельДанных, "ХранилищеМодели");
	СлужебныеОбъектыМоделей = Новый Массив();

	Для каждого СоответствиеМодели Из Модели Цикл

		Если ТипыСлужебныхМоделей.Найти(СоответствиеМодели.Значение.ТипСущности()) <> Неопределено Тогда
			СлужебныеОбъектыМоделей.Добавить(СоответствиеМодели.Значение);
			Продолжить;
		КонецЕсли;

		НоваяСтрокаМодели = ТаблицаМоделей.Добавить();
		НоваяСтрокаМодели.ОбъектМодели = СоответствиеМодели.Значение;
		НоваяСтрокаМодели.ТипСущности = Строка(СоответствиеМодели.Значение.ТипСущности());
		НоваяСтрокаМодели.ИмяТаблицы = СоответствиеМодели.Значение.ИмяТаблицы();

	КонецЦикла;

	Коннектор = МенеджерСущностей.ПолучитьКоннектор();
	
	СтрокаСоединения = Рефлексия.ПолучитьСвойство(МенеджерСущностей, "СтрокаСоединенияКоннектора");
	ПараметрыКоннектора = Рефлексия.ПолучитьСвойство(МенеджерСущностей, "ПараметрыКоннектора");

	РаботаСКоннекторами.ОткрытьКоннектор(Коннектор, СтрокаСоединения, ПараметрыКоннектора);

	Для каждого СлужебныйОбъектМодели Из СлужебныеОбъектыМоделей Цикл

		Коннектор.ИнициализироватьТаблицу(СлужебныйОбъектМодели);
		ПодчиненныеТаблицы = СлужебныйОбъектМодели.ПодчиненныеТаблицы();

		Для Каждого ПодчиненнаяТаблица Из ПодчиненныеТаблицы Цикл
			
			ОбъектМоделиЭлементКоллекции = ОбработкаКоллекций.ПолучитьОбъектМоделиДляПодчиненнойТаблицы(
				СлужебныйОбъектМодели, 
				ПодчиненнаяТаблица
			);
			
			Коннектор.ИнициализироватьТаблицу(ОбъектМоделиЭлементКоллекции);
		КонецЦикла;

	КонецЦикла;

	СохраненноеСостояние = СохраненноеСостояниеТаблиц(МенеджерСущностей);

	Попытка
		
		Коннектор.НачатьТранзакцию();

		ЕстьИзменения = Ложь;
		
		Лог.Отладка("Поиск новых таблиц");

		МоделиНовыхТаблиц = Новый Массив();

		Если СохраненноеСостояние.Количество() Тогда
			Для каждого СтрокаМодели Из ТаблицаМоделей Цикл
				ЕстьСовпадения = Ложь;
				Для каждого СохраненнаяТаблица Из СохраненноеСостояние Цикл		
					Если СохраненнаяТаблица.Имя = СтрокаМодели.ТипСущности ИЛИ СохраненнаяТаблица.ИмяТаблицы = СтрокаМодели.ИмяТаблицы Тогда
						ЕстьСовпадения = Истина;	
						Прервать;		
					КонецЕсли;	
				КонецЦикла;
				Если НЕ ЕстьСовпадения Тогда
					МоделиНовыхТаблиц.Добавить(СтрокаМодели.ОбъектМодели);	
				КонецЕсли;				
			КонецЦикла;			
		Иначе
			Для каждого СтрокаМодели Из ТаблицаМоделей Цикл
				МоделиНовыхТаблиц.Добавить(СтрокаМодели.ОбъектМодели);	
			КонецЦикла;
		КонецЕсли;

		Если НЕ МоделиНовыхТаблиц.Количество() Тогда
			Лог.Отладка("Новые таблицы не найдены");	
		КонецЕсли;

		Для каждого ОбъектМодели Из МоделиНовыхТаблиц Цикл

			Коннектор.ИнициализироватьТаблицу(ОбъектМодели);
			ПодчиненныеТаблицы = ОбъектМодели.ПодчиненныеТаблицы();
	
			Для Каждого ПодчиненнаяТаблица Из ПодчиненныеТаблицы Цикл
				
				ОбъектМоделиЭлементКоллекции = ОбработкаКоллекций.ПолучитьОбъектМоделиДляПодчиненнойТаблицы(
					ОбъектМодели, 
					ПодчиненнаяТаблица
				);
				
				Коннектор.ИнициализироватьТаблицу(ОбъектМоделиЭлементКоллекции);
			КонецЦикла;

			ЕстьИзменения = Истина;

		КонецЦикла;

		Лог.Отладка("Начато внесение изменений в базу данных");
		Для Каждого СохраненнаяТаблица Из СохраненноеСостояние Цикл
			
			Лог.Отладка("Проверка модели: " + СохраненнаяТаблица.Имя);
			
			СтрокиПоТипуСущности = ТаблицаМоделей.НайтиСтроки(Новый Структура("ТипСущности", СохраненнаяТаблица.Имя));
			СтрокиПоИмениТаблицы = ТаблицаМоделей.НайтиСтроки(Новый Структура("ИмяТаблицы", СохраненнаяТаблица.ИмяТаблицы));
			
			Если СтрокиПоТипуСущности.Количество() Тогда
				ОбъектМодели = СтрокиПоТипуСущности[0].ОбъектМодели;
			ИначеЕсли СтрокиПоИмениТаблицы.Количество() Тогда
				ОбъектМодели = СтрокиПоИмениТаблицы[0].ОбъектМодели;
			Иначе
				ОбъектМодели = Неопределено;
			КонецЕсли;
			
			Если ОбъектМодели = Неопределено Тогда
				Коннектор.ВыполнитьЗапрос("DROP TABLE IF EXISTS """ + СохраненнаяТаблица.ИмяТаблицы + """ CASCADE;");
				ЕстьИзменения = Истина;
				Лог.Отладка("Таблица " + СохраненнаяТаблица.ИмяТаблицы + " удалена");
				Продолжить;
			КонецЕсли;
			
			ИмяТаблицыВБазе = СохраненнаяТаблица.ИмяТаблицы;
			ИмяТаблицыВМодели = ОбъектМодели.ИмяТаблицы();
			
			Если ИмяТаблицыВМодели <> ИмяТаблицыВБазе Тогда
				Коннектор.ВыполнитьЗапрос("ALTER TABLE " + ИмяТаблицыВБазе + " RENAME TO " + ИмяТаблицыВМодели + ";");
				ЕстьИзменения = Истина;
				Лог.Отладка(СтрШаблон("Изменено имя таблицы с %1 на %2", ИмяТаблицыВБазе, ИмяТаблицыВМодели));
				ИмяТаблицыВБазе = ИмяТаблицыВМодели;
			КонецЕсли;
			
			КолонкиМодели = ОбъектМодели.Колонки();
			СуществующиеКолонки = Новый Массив();
			
			Лог.Отладка(СтрШаблон("Проверка колонок таблицы %1 на соответствие с моделью %2", ИмяТаблицыВБазе, СохраненнаяТаблица.Имя));
			
			// Выполняем модификацию и удаление текущих колонок
			Для Каждого СохраненнаяКолонка Из СохраненнаяТаблица.Колонки Цикл
				
				СтрокиПоИмениКолонки = КолонкиМодели.НайтиСтроки(Новый Структура("ИмяКолонки", СохраненнаяКолонка.ИмяКолонки));
				СтрокиПоИмениПоля = КолонкиМодели.НайтиСтроки(Новый Структура("ИмяПоля", СохраненнаяКолонка.Имя));
				
				Если СтрокиПоИмениКолонки.Количество() Тогда
					КолонкаМодели = СтрокиПоИмениКолонки[0];
				ИначеЕсли СтрокиПоИмениПоля.Количество() Тогда
					КолонкаМодели = СтрокиПоИмениПоля[0];
				Иначе
					КолонкаМодели = Неопределено;
				КонецЕсли;
				
				Если КолонкаМодели = Неопределено Тогда
					Коннектор.ВыполнитьЗапрос("ALTER TABLE " + ИмяТаблицыВБазе + " DROP COLUMN " + СохраненнаяКолонка.ИмяКолонки + ";");
					Лог.Отладка(СтрШаблон("Колонка %1 удалена", СохраненнаяКолонка.ИмяКолонки));
					ЕстьИзменения = Истина;
					Продолжить;
				КонецЕсли;
				
				ИмяКолонкиВБазе = СохраненнаяКолонка.ИмяКолонки;
				ИмяКолонкиВМодели = КолонкаМодели.ИмяКолонки;
				
				СуществующиеКолонки.Добавить(ИмяКолонкиВМодели);
				
				Если ИмяКолонкиВБазе <> ИмяКолонкиВМодели Тогда
					Коннектор.ВыполнитьЗапрос("ALTER TABLE " + ИмяТаблицыВБазе + " RENAME COLUMN " + ИмяКолонкиВБазе + " TO " + ИмяКолонкиВМодели + ";");
					Лог.Отладка(СтрШаблон("Изменено имя колонки с %1 на %2", ИмяКолонкиВБазе, ИмяКолонкиВМодели));
					ЕстьИзменения = Истина;
					ИмяКолонкиВБазе = ИмяКолонкиВМодели;
				КонецЕсли;
				
				ТипКолонкиВБазе = СохраненнаяКолонка.Тип;
				ТипКолонкиВМодели = КолонкаМодели.ТипКолонки;
				ТипКолонкиСУБД = Коннектор.ПолучитьТипКолонкиСУБД(ОбъектМодели, КолонкаМодели);

				// BSLLS:UsingHardcodeNetworkAddress-off
				ШаблонЗапросаНаИзменениеТипа = "UPDATE %1 SET %2 = NULL;
					|ALTER TABLE %1 ALTER COLUMN %2 TYPE %3 USING %2::%3%4;";
				
				Если ТипКолонкиВБазе <> ТипКолонкиВМодели Тогда
					ТекстЗапроса = СтрШаблон(ШаблонЗапросаНаИзменениеТипа, ИмяТаблицыВБазе, ИмяКолонкиВБазе, ТипКолонкиСУБД, "");
					ТипИзменен = Истина;
				ИначеЕсли Строка(КолонкаМодели.ТипСсылки) <> Строка(СохраненнаяКолонка.ТипСсылки) Тогда		
					ТипСсылкиСУБД = "";
					Если ЗначениеЗаполнено(КолонкаМодели.ТипСсылки) Тогда
						НайденныеСтрокиМоделей = ТаблицаМоделей.НайтиСтроки(Новый Структура("ТипСущности", Строка(КолонкаМодели.ТипСсылки)));
						Если НЕ НайденныеСтрокиМоделей.Количество() Тогда
							ВызватьИсключение "У модели " + Строка(ОбъектМодели.ТипСущности()) + " тип на который ссылается поле " + КолонкаМодели.ИмяПоля + " не существует";
						КонецЕсли;
						КолонкиСвязаннойМодели = НайденныеСтрокиМоделей[0].ОбъектМодели.Колонки();
						СтрокиКолонкиИдентификатор = КолонкиСвязаннойМодели.НайтиСтроки(Новый Структура("Идентификатор", Истина));
						ТипСсылкиСУБД = "ADD FOREIGN KEY (" + КолонкаМодели.ИмяКолонки + ") REFERENCES " + НайденныеСтрокиМоделей[0].ИмяТаблицы + "(" + СтрокиКолонкиИдентификатор[0].ИмяКолонки + ")";
						ТекстЗапроса = СтрШаблон(ШаблонЗапросаНаИзменениеТипа, ИмяТаблицыВБазе, ИмяКолонкиВБазе, ТипКолонкиСУБД, ", " + ТипСсылкиСУБД);	
					КонецЕсли;
					ТипИзменен = Истина;
				Иначе
					ТипИзменен = Ложь;
				КонецЕсли;
				
				Если ТипИзменен Тогда
					Коннектор.ВыполнитьЗапрос(ТекстЗапроса);
					Лог.Отладка(СтрШаблон("Изменен тип колонки %1 с %2%3 на %4%5", ИмяКолонкиВБазе, ТипКолонкиВБазе, ?(ЗначениеЗаполнено(СохраненнаяКолонка.ТипСсылки), "(" + СохраненнаяКолонка.ТипСсылки + ")", ""), Строка(ТипКолонкиВМодели), ?(ЗначениеЗаполнено(КолонкаМодели.ТипСсылки), "(" + КолонкаМодели.ТипСсылки + ")", "")));
					ЕстьИзменения = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			// Выполняем создание новых колонок
			Для Каждого КолонкаМодели Из КолонкиМодели Цикл
				
				Если СуществующиеКолонки.Найти(КолонкаМодели.ИмяКолонки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТипКолонкиСУБД = Коннектор.ПолучитьТипКолонкиСУБД(ОбъектМодели, КолонкаМодели);
				ТипСсылкиСУБД = "";

				Если ЗначениеЗаполнено(КолонкаМодели.ТипСсылки) Тогда
					НайденныеСтрокиМоделей = ТаблицаМоделей.НайтиСтроки(Новый Структура("ТипСущности", Строка(КолонкаМодели.ТипСсылки)));
					Если НЕ НайденныеСтрокиМоделей.Количество() Тогда
						ВызватьИсключение "У модели " + Строка(ОбъектМодели.ТипСущности()) + " тип на который ссылается поле " + КолонкаМодели.ИмяПоля + " не существует";
					КонецЕсли;
					КолонкиСвязаннойМодели = НайденныеСтрокиМоделей[0].ОбъектМодели.Колонки();
					СтрокиКолонкиИдентификатор = КолонкиСвязаннойМодели.НайтиСтроки(Новый Структура("Идентификатор", Истина));
					ТипСсылкиСУБД = "ADD FOREIGN KEY (" + КолонкаМодели.ИмяКолонки + ") REFERENCES " + НайденныеСтрокиМоделей[0].ИмяТаблицы + "(" + СтрокиКолонкиИдентификатор[0].ИмяКолонки + ")";	
				КонецЕсли;				

				Коннектор.ВыполнитьЗапрос("ALTER TABLE " + ИмяТаблицыВБазе + " ADD COLUMN " + КолонкаМодели.ИмяКолонки + " " + ТипКолонкиСУБД + ?(ТипСсылкиСУБД = "", "", ", " + ТипСсылкиСУБД) + ";");
				Лог.Отладка(СтрШаблон("Добавлена новая колонка %1 с типом %2 в таблицу %3", КолонкаМодели.ИмяКолонки, ТипКолонкиСУБД, ИмяТаблицыВБазе));
				ЕстьИзменения = Истина;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Лог.Отладка("Запись текущего состояния структуры базы данных в хранилище");
		ТекущаяСтруктураТаблиц = ТекущееСостояниеТаблиц(Модели, ТипыСлужебныхМоделей);
		ЗаписатьСостояниеТаблиц(МенеджерСущностей, ТекущаяСтруктураТаблиц);
		
		Коннектор.ЗафиксироватьТранзакцию();
		
		Если ЕстьИзменения Тогда
			Лог.Отладка("Изменения в базу данных успешно внесены");
		Иначе
			Лог.Отладка("Изменения в структуре базы данных отсутствуют");
		КонецЕсли;
		
	Исключение
		Коннектор.ОтменитьТранзакцию();
		Лог.Ошибка("Возникла ошибка в процессе внесения изменений в структуру базы данных:" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры		

Процедура ЗаписатьСостояниеТаблиц(МенеджерСущностей, СтруктураТаблиц)
	
	Коннектор = МенеджерСущностей.ПолучитьКоннектор();
	Коннектор.ВыполнитьЗапрос("DELETE FROM onecoreТаблицаМодели_Колонки");
	Коннектор.ВыполнитьЗапрос("DELETE FROM oc_КолонкаТаблицыМодели");
	Коннектор.ВыполнитьЗапрос("DELETE FROM oc_ТаблицаМодели");

	Для каждого ДанныеТаблицы Из СтруктураТаблиц Цикл
		
		ОбъектТаблицы = Новый OneCoreТаблицаМодели();
		ОбъектТаблицы.ИмяТаблицы = ДанныеТаблицы.ИмяТаблицы;
		ОбъектТаблицы.Имя = ДанныеТаблицы.Имя;

		МассивКолонок = Новый Массив();

		Для каждого ДанныеКолонки Из ДанныеТаблицы.Колонки Цикл
			ОбъектКолонки = Новый OneCoreКолонкаТаблицыМодели();
			ОбъектКолонки.ИмяКолонки = ДанныеКолонки.ИмяКолонки;
			ОбъектКолонки.Имя = ДанныеКолонки.Имя;
			ОбъектКолонки.Тип = ДанныеКолонки.Тип;
			ОбъектКолонки.ТипСсылки = ДанныеКолонки.ТипСсылки;
			МенеджерСущностей.Сохранить(ОбъектКолонки);
			МассивКолонок.Добавить(ОбъектКолонки);
		КонецЦикла;

		ОбъектТаблицы.Колонки = МассивКолонок;
		МенеджерСущностей.Сохранить(ОбъектТаблицы);

	КонецЦикла;
	
КонецПроцедуры

Функция СохраненноеСостояниеТаблиц(МенеджерСущностей)
	
	ТаблицыМоделей = МенеджерСущностей.Получить(Тип("OneCoreТаблицаМодели"));

	Если НЕ ТаблицыМоделей.Количество() Тогда
		Возврат Новый Массив();
	КонецЕсли;

	МассивТаблиц = Новый Массив();

	Для каждого Модель Из ТаблицыМоделей Цикл
		
		МассивСвойств = Новый Массив();

		Для каждого Колонка Из Модель.Колонки Цикл
			СтруктураСвойства = Новый Структура("ИмяКолонки, Имя, Тип, ТипСсылки", Колонка.ИмяКолонки, Колонка.Имя, Строка(Колонка.Тип), Строка(Колонка.ТипСсылки));
			МассивСвойств.Добавить(СтруктураСвойства);
		КонецЦикла;

		МассивТаблиц.Добавить(Новый Структура("ИмяТаблицы, Имя, Колонки", Модель.ИмяТаблицы, Модель.Имя, МассивСвойств));

	КонецЦикла;

	Возврат МассивТаблиц;
	
КонецФункции

Функция ТекущееСостояниеТаблиц(Модели, ТипыСлужебныхМоделей)
		
	МассивТаблиц = Новый Массив();

	Для каждого Элемент Из Модели Цикл
		
		ОбъектМодели = Элемент.Значение;

		Если ТипыСлужебныхМоделей.Найти(ОбъектМодели.ТипСущности()) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ИмяТаблицы = ОбъектМодели.ИмяТаблицы();
		ИмяТипа = Строка(Элемент.Ключ);
		МассивСвойств = Новый Массив();

		КолонкиМодели = ОбъектМодели.Колонки();

		Для каждого Колонка Из КолонкиМодели Цикл
			СтруктураСвойства = Новый Структура("ИмяКолонки, Имя, Тип, ТипСсылки", Колонка.ИмяКолонки, Колонка.ИмяПоля, Строка(Колонка.ТипКолонки), Строка(Колонка.ТипСсылки));
			МассивСвойств.Добавить(СтруктураСвойства);
		КонецЦикла;

		МассивТаблиц.Добавить(Новый Структура("ИмяТаблицы, Имя, Колонки", ИмяТаблицы, ИмяТипа, МассивСвойств));

	КонецЦикла;
	
	Возврат МассивТаблиц;
	
КонецФункции

Функция ФайлСуществует(Путь) Экспорт
	
	Возврат Новый Файл(Путь).Существует();

КонецФункции