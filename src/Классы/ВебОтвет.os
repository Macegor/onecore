// BSLLS:ExportVariables-off

#Использовать strings

#Область ОписаниеПеременных

// ВебЗапрос - Проинициализированный объект запроса
Перем Запрос;
// TCPСоединение - Соединение генерируемое сервером, используется для ответа на запрос
Перем Соединение;
// Соответствие - Заголовки ответа
Перем Заголовки;
// Строка - Тип http запроса (GET/POST/PUT и т.д)
Перем ТипЗапроса;
// Строка, ДвоичныеДанные - Данне для отправки
Перем ТелоОтвета;
// КодировкаТекста - Кодировка текста ответа
Перем КодировкаТекстаТела;
// Число - Код ответа http
Перем КодСостояния;
// Булево - Определяет состояние отправки ответа
Перем Отправлен;

#КонецОбласти

#Область ОбработчикиСобытийу

Процедура ПриСозданииОбъекта(Знач ВебЗапрос)
	
	Запрос = ВебЗапрос;

	Соединение = Запрос.Соединение();
	ТипЗапроса = Запрос.ТипЗапроса();
	Заголовки = Новый Соответствие();	
	Отправлен = Ложь;
	ТелоОтвета = "";

	Заголовки.Вставить("Server", "Onecore");

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Добавляет заголовок
//
// Параметры:
//   Ключ - Строка - Имя заголовка
//   Значение - Строка - Значение
//
Процедура ДобавитьЗаголовок(Ключ, Значение) Экспорт

	Заголовки.Вставить(Ключ, Значение);

КонецПроцедуры

// Устанавливает объекту тело в виде строки
//
// Параметры:
//   ТелоСтрокой - Строка - Тело ответа в виде строки
//   _КодировкаТекста - КодировкаТекста - Поддерживается UTF-8 и UTF-16
//
Процедура УстановитьТелоКакСтроку(ТелоСтрокой, _КодировкаТекста = Неопределено) Экспорт

	ТелоОтвета = ТелоСтрокой;

	Если _КодировкаТекста = КодировкаТекста.UTF16 Тогда
		КодировкаТекстаТела = "UTF-16";
	Иначе
		КодировкаТекстаТела = "UTF-8";	
	КонецЕсли;

КонецПроцедуры

// Устанавливает объекту тело в двоичных данных
//
// Параметры:
//   ДвоичныеДанные - ДвоичныеДанные - Двоичные данные для отправки
//
Процедура УстановитьТелоКакДвоичныеДанные(ДвоичныеДанные) Экспорт

	ТелоОтвета = ДвоичныеДанные;

КонецПроцедуры

// Добавляет в заголовок ответа тип содержимого
//
// Параметры:
//   Тип - Строка - Имя типа или расширение файла
//
Процедура УстановитьТипСодержимого(Тип) Экспорт

	ТипКонтента = ВебСерверСлужебное.ОпределитьТипСодержимого(Тип);
	ДобавитьЗаголовок("Content-Type", СокрЛП(СтрШаблон("%1; charset=utf-8", ТипКонтента)));

КонецПроцедуры

// Устанавливает код состояния ответа
//
// Параметры:
//   Код - Число - Код ответа http
Процедура УстановитьКодСостояния(Код) Экспорт

	КодСостояния = Код;

КонецПроцедуры

// Возвращает состояние отправки ответа
//
//  Возвращаемое значение:
//   Булево - состояние отправки ответа
//
Функция ОтветОтправлен() Экспорт
	Возврат Отправлен;
КонецФункции

// Выполняет ответ на запрос и закрывает соединение
//
// Параметры:
//   Код - Число - Поддерживаемый код состояния http ответа
//
Процедура Отправить(Код = Неопределено) Экспорт

	КодСостояния = ?(Код = Неопределено, КодСостояния, Код);

	ШаблонОтвета =  
	"HTTP/1.1 %1 %2
	|%3
	|
	|";

	ВеличинаТела = 0;
	КодировкаТекстаТела = ?(КодировкаТекстаТела = Неопределено, "UTF-8", КодировкаТекстаТела);

	ДвоичныеДанныеШапки = Неопределено;
	ДвоичныеДанныеТела = Неопределено;

	// Подготавливаем тело
	Если НЕ ЗначениеЗаполнено(ТелоОтвета) Тогда
		ДвоичныеДанныеТела = ПолучитьДвоичныеДанныеИзСтроки("", КодировкаТекста.UTF8);
	Иначе
		Если ТипЗнч(ТелоОтвета) = Тип("Строка") Тогда
			ДвоичныеДанныеТела = ПолучитьДвоичныеДанныеИзСтроки(СокрЛП(ТелоОтвета), КодировкаТекста.UTF8);
		ИначеЕсли ТипЗнч(ТелоОтвета) = Тип("ДвоичныеДанные") Тогда 
			ДвоичныеДанныеТела = ТелоОтвета;	
		Иначе
			ВызватьИсключение "Не верный тип тела ответа";
		КонецЕсли;	
	КонецЕсли;

	ВеличинаТела = ПолучитьРазмерДанных(ДвоичныеДанныеТела);
	Заголовки.Вставить("Content-Length", ВеличинаТела);

	// Подготовливаем заголовки
	ЗаголовкиСтрокой = "";

	Для каждого Элемент Из Заголовки Цикл
		ЗаголовкиСтрокой = ЗаголовкиСтрокой + Элемент.Ключ + ": " + Элемент.Значение + Символы.ПС;
	КонецЦикла;

	ЗаголовкиСтрокой = СокрЛП(ЗаголовкиСтрокой);

	МассивДвоичныхДанных = Новый Массив();

	ОписаниеКодаСостояния = ВебСерверСлужебное.ПолучитьОписаниеКодаHTTP(КодСостояния);
	ДанныеОтветаСтрокой = СтрШаблон(ШаблонОтвета, Строка(КодСостояния), ОписаниеКодаСостояния, ЗаголовкиСтрокой);

	ДвоичныеДанныеШапки = ПолучитьДвоичныеДанныеИзСтроки(ДанныеОтветаСтрокой, КодировкаТекста.UTF8);

	МассивДвоичныхДанных.Добавить(ДвоичныеДанныеШапки);
	МассивДвоичныхДанных.Добавить(ДвоичныеДанныеТела);

	ДвоичныеДанныеОтвета = СоединитьДвоичныеДанные(МассивДвоичныхДанных);

	Соединение.ОтправитьДвоичныеДанные(ДвоичныеДанныеОтвета);

	Если НЕ Соединение.Активно Тогда
		Лог.Предупреждение("Соединение было сброшено");	
	КонецЕсли;
		
	Соединение.Закрыть();

	ШаблонЛога = "%3 %4 ответ %1 %2 размер: %5";
	АдресЗапроса = Запрос.Адрес();
	Лог.Информация((СтрШаблон(ШаблонЛога, Строка(КодСостояния), ОписаниеКодаСостояния, ТипЗапроса, АдресЗапроса, ВеличинаТела)));

	Отправлен = Истина;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьЗапрос() Экспорт
	Возврат Запрос;	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ГенерацияХешаОтвета(КлючВхода)
	Результат = КлючВхода + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";	
	Провайдер = Новый ХешированиеДанных(ХешФункция.SHA1);
	Провайдер.Добавить(Результат);
	Результат = Base64Строка(Провайдер.ХешСумма);
	Возврат Результат;	
КонецФункции

Функция ПолучитьРазмерДанных(Знач Данные)

    Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
        ДанныеBase64 = Base64Строка(Данные);
    Иначе
        Возврат СтрДлина(XMLСтрока(Данные));
    КонецЕсли;

    // Base64 - специальный формат хранения данных в текстовом формате
    РазмерДанных = СтрДлина(ДанныеBase64) - ?(Прав(ДанныеBase64, 1) = "=", 1, 0) - ?(Прав(ДанныеBase64, 2) = "==", 1, 0);
    РазмерДанных = Цел(РазмерДанных / 4 * 3); // в байтах // BSLLS:MagicNumber-off

    Возврат РазмерДанных;

КонецФункции

#КонецОбласти