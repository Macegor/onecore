// BSLLS:DuplicateStringLiteral-off
// BSLLS:NumberOfValuesInStructureConstructor-off
#Использовать fs
#Использовать asserts
#Использовать json
#Использовать entity

// Глобальный объект модуля менеджера сущностей
Перем МенеджерСущностей;
// Таблица значений хранящая все модели приложения
Перем ТаблицаМоделей;
// Путь хранения json с сохраненным в базе данных состоянием таблиц
Перем ПутьКФайлуСостоянияТаблиц;
// Строка соединения к базе данных
Перем СтрокаСоединения;
// Экземпляр коннектора базы данных
Перем КоннекторPostgreSQL;

// Инициализирует необходимые данные для работы с базой данных
//
Процедура Инициализировать() Экспорт

	ПутьКФайлуСостоянияТаблиц = ОбъединитьПути(Служебное.КаталогПриложения(), "tables.json");
	НастройкиПодключения = Настройки.Получить("Приложение.БазаДанных");
	ТекстОшибкиПодключения = "";
	КоннекторPostgreSQL = Новый КоннекторPostgreSQL();
	
	Если НастройкиПодключения = Неопределено Тогда
		Лог.Ошибка("Настройки подключения к базе данных не инициализированы");
		Возврат;
	КонецЕсли;

	СтрокаСоединения = СтрШаблон("Host=%1;Username=%2;Password=%3;Database=%4;port=%5;",
								НастройкиПодключения.Адрес,
								НастройкиПодключения.Пользователь,
								НастройкиПодключения.Пароль,
								НастройкиПодключения.ИмяБазы,
								НастройкиПодключения.Порт);

	Если НЕ ПроверитьПодключение(ТекстОшибкиПодключения) Тогда
		Лог.Ошибка(СтрШаблон("Подключение к базе данных не возможно, по причине: %1", ТекстОшибкиПодключения));
		Возврат;	
	КонецЕсли;

	ОбновитьТаблицыБазыДанных();
	
КонецПроцедуры

Функция ПроверитьПодключение(ТекстОшибки = Неопределено) Экспорт
	
	Попытка
		КоннекторPostgreSQL.Открыть(СтрокаСоединения, Новый Массив());
		КоннекторPostgreSQL.ВыполнитьЗапрос("SELECT 1;");
		КоннекторPostgreSQL.Закрыть();
		Возврат Истина;
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Записывает объект в базу данных, выполняет экспортные процедуры "ПередЗаписью" и "ПослеЗаписи" в случае их наличия.
// Процедуры "ПередЗаписью" и "ПослеЗаписи" должна содержать параметр "Отказ"
//
// Параметры:
//   Объект - Произвольный - Подготовленный объект для записи
//
Процедура ЗаписатьОбъект(Объект) Экспорт
	
	// Отказ = Ложь;
	
	// Объект.Идентификатор = ?(ЗначениеЗаполнено(Объект.Идентификатор), Объект.Идентификатор, Строка(Новый УникальныйИдентификатор()));
	
	// Если Рефлексия.МетодСуществует(Объект, "ПередЗаписью") Тогда
	// 	Аргументы = Новый Массив();
	// 	Аргументы.Добавить(Ложь);
	// 	Рефлексия.ВызватьМетод(Объект, "ПередЗаписью", Аргументы);
	// 	Отказ = Аргументы[0];
	// КонецЕсли;
	
	// Если Отказ Тогда
	// 	Возврат;
	// КонецЕсли;
	
	// // МенеджерСущностей.НачатьТранзакцию();
	// МенеджерСущностей.Сохранить(Объект);
	
	// Если Рефлексия.МетодСуществует(Объект, "ПослеЗаписи") Тогда
	// 	Аргументы = Новый Массив();
	// 	Аргументы.Добавить(Ложь);
	// 	Рефлексия.ВызватьМетод(Объект, "ПослеЗаписи", Аргументы);
	// 	Отказ = Аргументы[0];		
	// КонецЕсли;
	
	// Если Отказ Тогда
	// 	// МенеджерСущностей.ОтменитьТранзакцию();
	// 	Возврат;
	// КонецЕсли;
	
	// // МенеджерСущностей.ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#Область УправлениеСостояниемТаблиц

Функция СохраненноеСостояниеТаблиц()
	
	Если НЕ ФС.Существует(ПутьКФайлуСостоянияТаблиц) Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ПарсерJSON = Новый ПарсерJSON();
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуСостоянияТаблиц);
	ТекстJSON = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Возврат ПарсерJSON.ПрочитатьJSON(ТекстJSON, , , Истина);
	
КонецФункции

Функция ТекущееСостояниеТаблиц()
	
	// СтруктураМетаданных = Метаданные.ПолучитьСтруктуруМетаданных();
	
	// МассивТаблиц = Новый Массив();
	
	// Если Рефлексия = Неопределено Тогда
	// 	Рефлексия = Ядро.ПолучитьРефлектор();
	// КонецЕсли;
	
	// СвойстваПользовательПриложения = Новый Массив();
	// СвойстваПользовательПриложения.Добавить(Новый Структура("ИмяКолонки, Имя, Тип, ТипСсылки", "id", "Идентификатор", "Строка", ""));
	// СвойстваПользовательПриложения.Добавить(Новый Структура("ИмяКолонки, Имя, Тип, ТипСсылки", "login", "Имя", "Строка", ""));
	// СвойстваПользовательПриложения.Добавить(Новый Структура("ИмяКолонки, Имя, Тип, ТипСсылки", "password", "Пароль", "Строка", ""));
	// МассивТаблиц.Добавить(Новый Структура("ИмяТаблицы, Имя, Колонки", "app_users", "ПользовательПриложения", СвойстваПользовательПриложения));

	// СвойстваТокенДоступа = Новый Массив();
	// СвойстваТокенДоступа.Добавить(Новый Структура("ИмяКолонки, Имя, Тип, ТипСсылки", "id", "Идентификатор", "Строка", ""));
	// СвойстваТокенДоступа.Добавить(Новый Структура("ИмяКолонки, Имя, Тип, ТипСсылки", "refresh", "ИдентификаторОбновления", "Строка", ""));
	// СвойстваТокенДоступа.Добавить(Новый Структура("ИмяКолонки, Имя, Тип, ТипСсылки", "app_user", "Пользователь", "Ссылка", "ПользовательПриложения"));
	// СвойстваТокенДоступа.Добавить(Новый Структура("ИмяКолонки, Имя, Тип, ТипСсылки", "issued", "ДатаВыдачи", "ДатаВремя", ""));
	// СвойстваТокенДоступа.Добавить(Новый Структура("ИмяКолонки, Имя, Тип, ТипСсылки", "duration", "ВремяЖизни", "Целое", ""));
	// МассивТаблиц.Добавить(Новый Структура("ИмяТаблицы, Имя, Колонки", "access_tokens", "ТокенДоступа", СвойстваТокенДоступа));

	// Для Каждого Компонент Из СтруктураМетаданных.Компоненты Цикл
	// 	Для Каждого ОбъектКомпонента Из Компонент.Объекты Цикл
	// 		МассивСвойств = Новый Массив();
	// 		Для Каждого Свойство Из ОбъектКомпонента.Свойства Цикл
	// 			СтруктураСвойства = Новый Структура("ИмяКолонки, Имя, Тип, ТипСсылки", Свойство.Значение.ИмяКолонки, Свойство.Значение.Имя, Свойство.Значение.Тип, Свойство.Значение.ТипСсылки);
	// 			МассивСвойств.Добавить(СтруктураСвойства);
	// 		КонецЦикла;
	// 		МассивТаблиц.Добавить(Новый Структура("ИмяТаблицы, Имя, Колонки", ОбъектКомпонента.ИмяТаблицы, ОбъектКомпонента.Имя, МассивСвойств));
	// 	КонецЦикла;
	// КонецЦикла;
	
	// Возврат МассивТаблиц;
	
КонецФункции

Процедура ЗаписатьСостояниеТаблиц(СтруктураТаблиц)
	
	ПарсерJSON = Новый ПарсерJSON();
	СтрокаJSON = ПарсерJSON.ЗаписатьJSON(СтруктураТаблиц);
	
	ЗаписьТекста = Новый ЗаписьТекста(ПутьКФайлуСостоянияТаблиц);
	ЗаписьТекста.Записать(СтрокаJSON);
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

Процедура ОбновитьТаблицыБазыДанных()
	
	// Приложение.ВыводВКонсоль("Получение текущего состояние базы данных");
	// СохраненноеСостояние = СохраненноеСостояниеТаблиц();
	
	// // Получаем настройки подключения
	// Если НастройкиПодключения = Неопределено Тогда
	// 	НастройкиПодключения = НастройкиПриложения.ПолучитьСистемныеНастройки().БазаДанных;
	// КонецЕсли;
	
	// МодельДанных = Новый МодельДанных();
	
	// // Получаем менеджер сущностей
	// МенеджерСущностей = Новый МенеджерСущностей(Тип("КоннекторPostgreSQL"), СтрокаСоединения);
	
	// // Получаем таблицу сценариев
	// ТаблицаСценариев = Метаданные.ПолучитьТаблицуСценариев();
	
	// // Создаём таблицу моделей
	// ТаблицаМоделей = Новый ТаблицаЗначений();
	// ТаблицаМоделей.Колонки.Добавить("ОбъектМодели");
	// ТаблицаМоделей.Колонки.Добавить("ТипСущности");
	// ТаблицаМоделей.Колонки.Добавить("ИмяТаблицы");
	
	// Классы = ТаблицаСценариев.НайтиСтроки(Новый Структура("Тип", "Класс"));
	
	// Приложение.ВыводВКонсоль("Регистрация класса ""ПользовательПриложения"" как модели");
	// МенеджерСущностей.ДобавитьКлассВМодель(Тип("ПользовательПриложения"));

	// Приложение.ВыводВКонсоль("Регистрация класса ""ТокенДоступа"" как модели");
	// МенеджерСущностей.ДобавитьКлассВМодель(Тип("ТокенДоступа"));

	// ОбъектМоделиПользовательПриложения = МодельДанных.СоздатьОбъектМодели(Тип("ПользовательПриложения"));
	// НоваяСтрокаМодели = ТаблицаМоделей.Добавить();
	// НоваяСтрокаМодели.ОбъектМодели = ОбъектМоделиПользовательПриложения;
	// НоваяСтрокаМодели.ТипСущности = "ПользовательПриложения";
	// НоваяСтрокаМодели.ИмяТаблицы = "app_users";

	// ОбъектМоделиТокенДоступа = МодельДанных.СоздатьОбъектМодели(Тип("ТокенДоступа"));
	// НоваяСтрокаМодели = ТаблицаМоделей.Добавить();
	// НоваяСтрокаМодели.ОбъектМодели = ОбъектМоделиТокенДоступа;
	// НоваяСтрокаМодели.ТипСущности = "ТокенДоступа";
	// НоваяСтрокаМодели.ИмяТаблицы = "access_tokens";	
	
	// Для Каждого ОбъектМетаданных Из Классы Цикл
		
	// 	ТипКласса = Новый(ОбъектМетаданных.Имя);
		
	// 	Если НЕ КлассЯвляетсяМоделью(ТипКласса) Тогда
	// 		Приложение.ВыводВКонсоль("Класс """ + ОбъектМетаданных.Имя + """ не является моделью, пропущен");
	// 		Продолжить;
	// 	КонецЕсли;
		
	// 	Приложение.ВыводВКонсоль("Регистрация класса """ + ОбъектМетаданных.Имя + """ как модели");
		
	// 	МенеджерСущностей.ДобавитьКлассВМодель(Тип(ОбъектМетаданных.Имя));
		
	// 	ОбъектМодели = МодельДанных.СоздатьОбъектМодели(Тип(ОбъектМетаданных.Имя));
		
	// 	НоваяСтрокаМодели = ТаблицаМоделей.Добавить();
	// 	НоваяСтрокаМодели.ОбъектМодели = ОбъектМодели;
	// 	НоваяСтрокаМодели.ТипСущности = Строка(ОбъектМодели.ТипСущности());
	// 	НоваяСтрокаМодели.ИмяТаблицы = ОбъектМодели.ИмяТаблицы();
		
	// КонецЦикла;
	
	// Приложение.ВыводВКонсоль("Подключение к базе данных под управлением PostgreSQL");
	// КоннекторPostgreSQL = Новый КоннекторPostgreSQL();
	// КоннекторPostgreSQL.Открыть(СтрокаСоединения, Новый Массив());
	
	// Попытка
		
	// 	КоннекторPostgreSQL.НачатьТранзакцию();

	// 	ЕстьИзменения = Ложь;
		
	// 	Приложение.ВыводВКонсоль("Поиск новых таблиц");

	// 	МоделиНовыхТаблиц = Новый Массив();

	// 	Если СохраненноеСостояние.Количество() Тогда
	// 		Для каждого СтрокаМодели Из ТаблицаМоделей Цикл
	// 			ЕстьСовпадения = Ложь;
	// 			Для каждого СохраненнаяТаблица Из СохраненноеСостояние Цикл		
	// 				Если СохраненнаяТаблица.Имя = СтрокаМодели.ТипСущности ИЛИ СохраненнаяТаблица.ИмяТаблицы = СтрокаМодели.ИмяТаблицы Тогда
	// 					ЕстьСовпадения = Истина;	
	// 					Прервать;		
	// 				КонецЕсли;	
	// 			КонецЦикла;
	// 			Если НЕ ЕстьСовпадения Тогда
	// 				МоделиНовыхТаблиц.Добавить(СтрокаМодели.ОбъектМодели);	
	// 			КонецЕсли;				
	// 		КонецЦикла;			
	// 	Иначе
	// 		Для каждого СтрокаМодели Из ТаблицаМоделей Цикл
	// 			МоделиНовыхТаблиц.Добавить(СтрокаМодели.ОбъектМодели);	
	// 		КонецЦикла;
	// 	КонецЕсли;

	// 	Если НЕ МоделиНовыхТаблиц.Количество() Тогда
	// 		Приложение.ВыводВКонсоль("Новые таблицы не найдены");	
	// 	КонецЕсли;

	// 	Для каждого ОбъектМодели Из МоделиНовыхТаблиц Цикл

	// 		КолонкиМодели = ОбъектМодели.Колонки();
	// 		СтрокиСИдентификатором = КолонкиМодели.НайтиСтроки(Новый Структура("Идентификатор", Истина));
	// 		Если НЕ СтрокиСИдентификатором.Количество() Тогда
	// 			ВызватьИсключение "У модели " + Строка(ОбъектМодели.ТипСущности()) + " отсутствует поле идентификатор";
	// 		КонецЕсли;
	// 		КолонкаИдентификатора = СтрокиСИдентификатором[0];
	// 		ТипКолонкиСУБД = КоннекторPostgreSQL.ПолучитьТипКолонкиСУБД(ОбъектМодели, КолонкаИдентификатора);

	// 		ШаблонДобавления = "CREATE TABLE IF NOT EXISTS %1 ( %2 %3 PRIMARY KEY )";

	// 		Приложение.ВыводВКонсоль("Создание новой таблицы " + ОбъектМодели.ИмяТаблицы() + " из модели " + Строка(ОбъектМодели.ТипСущности()));
	// 		КоннекторPostgreSQL.ВыполнитьЗапрос(СтрШаблон(ШаблонДобавления, ОбъектМодели.ИмяТаблицы(), КолонкаИдентификатора.ИмяКолонки, ТипКолонкиСУБД));
	// 		ЕстьИзменения = Истина;

	// 	КонецЦикла;

	// 	Для каждого ОбъектМодели Из МоделиНовыхТаблиц Цикл

	// 		Приложение.ВыводВКонсоль("Обработка колонок модели " + Строка(ОбъектМодели.ТипСущности()));

	// 		ТекстЗапросаСКолонками = "";

	// 		КолонкиМодели = ОбъектМодели.Колонки();

	// 		Для каждого Колонка Из КолонкиМодели Цикл

	// 			Если Колонка.Идентификатор Тогда
	// 				Продолжить;
	// 			КонецЕсли;	

	// 			ТипКолонкиСУБД = КоннекторPostgreSQL.ПолучитьТипКолонкиСУБД(ОбъектМодели, Колонка);
	// 			ТипСсылкиСУБД = "";

	// 			Если ЗначениеЗаполнено(Колонка.ТипСсылки) Тогда
	// 				НайденныеСтрокиМоделей = ТаблицаМоделей.НайтиСтроки(Новый Структура("ТипСущности", Строка(Колонка.ТипСсылки)));
	// 				Если НЕ НайденныеСтрокиМоделей.Количество() Тогда
	// 					ВызватьИсключение "У модели " + Строка(ОбъектМодели.ТипСущности()) + " тип на который ссылается поле " + Колонка.ИмяПоля + " не существует";
	// 				КонецЕсли;
	// 				КолонкиСвязаннойМодели = НайденныеСтрокиМоделей[0].ОбъектМодели.Колонки();
	// 				СтрокиКолонкиИдентификатор = КолонкиСвязаннойМодели.НайтиСтроки(Новый Структура("Идентификатор", Истина));
	// 				ТипСсылкиСУБД = "ADD FOREIGN KEY (" + Колонка.ИмяКолонки + ") REFERENCES " + НайденныеСтрокиМоделей[0].ИмяТаблицы + "(" + СтрокиКолонкиИдентификатор[0].ИмяКолонки + ")";
	// 			КонецЕсли;
			
	// 			ТекстЗапросаСКолонками = ТекстЗапросаСКолонками + ?(ТекстЗапросаСКолонками = "", "", ", ") + "ADD COLUMN " + Колонка.ИмяКолонки + " " + ТипКолонкиСУБД + ?(ТипСсылкиСУБД = "", "", ", " + ТипСсылкиСУБД);

	// 		КонецЦикла;

	// 		КоннекторPostgreSQL.ВыполнитьЗапрос("ALTER TABLE " + ОбъектМодели.ИмяТаблицы() + " " + ТекстЗапросаСКолонками + ";");
	// 		ЕстьИзменения = Истина;

	// 	КонецЦикла;		
		
	// 	Приложение.ВыводВКонсоль("Начато внесение изменений в базу данных");
	// 	Для Каждого СохраненнаяТаблица Из СохраненноеСостояние Цикл
			
	// 		Приложение.ВыводВКонсоль("Проверка модели: " + СохраненнаяТаблица.Имя);
			
	// 		СтрокиПоТипуСущности = ТаблицаМоделей.НайтиСтроки(Новый Структура("ТипСущности", СохраненнаяТаблица.Имя));
	// 		СтрокиПоИмениТаблицы = ТаблицаМоделей.НайтиСтроки(Новый Структура("ИмяТаблицы", СохраненнаяТаблица.ИмяТаблицы));
			
	// 		Если СтрокиПоТипуСущности.Количество() Тогда
	// 			ОбъектМодели = СтрокиПоТипуСущности[0].ОбъектМодели;
	// 		ИначеЕсли СтрокиПоИмениТаблицы.Количество() Тогда
	// 			ОбъектМодели = СтрокиПоИмениТаблицы[0].ОбъектМодели;
	// 		Иначе
	// 			ОбъектМодели = Неопределено;
	// 		КонецЕсли;
			
	// 		Если ОбъектМодели = Неопределено Тогда
	// 			КоннекторPostgreSQL.ВыполнитьЗапрос("DROP TABLE IF EXISTS """ + СохраненнаяТаблица.ИмяТаблицы + """ CASCADE;");
	// 			ЕстьИзменения = Истина;
	// 			Приложение.ВыводВКонсоль("Таблица " + СохраненнаяТаблица.ИмяТаблицы + " удалена");
	// 			Продолжить;
	// 		КонецЕсли;
			
	// 		ИмяТаблицыВБазе = СохраненнаяТаблица.ИмяТаблицы;
	// 		ИмяТаблицыВМодели = ОбъектМодели.ИмяТаблицы();
			
	// 		Если ИмяТаблицыВМодели <> ИмяТаблицыВБазе Тогда
	// 			КоннекторPostgreSQL.ВыполнитьЗапрос("ALTER TABLE " + ИмяТаблицыВБазе + " RENAME TO " + ИмяТаблицыВМодели + ";");
	// 			ЕстьИзменения = Истина;
	// 			Приложение.ВыводВКонсоль(СтрШаблон("Изменено имя таблицы с %1 на %2", ИмяТаблицыВБазе, ИмяТаблицыВМодели));
	// 			ИмяТаблицыВБазе = ИмяТаблицыВМодели;
	// 		КонецЕсли;
			
	// 		КолонкиМодели = ОбъектМодели.Колонки();
	// 		СуществующиеКолонки = Новый Массив();
			
	// 		Приложение.ВыводВКонсоль(СтрШаблон("Проверка колонок таблицы %1 на соответствие с моделью %2", ИмяТаблицыВБазе, СохраненнаяТаблица.Имя));
			
	// 		// Выполняем модификацию и удаление текущих колонок
	// 		Для Каждого СохраненнаяКолонка Из СохраненнаяТаблица.Колонки Цикл
				
	// 			СтрокиПоИмениКолонки = КолонкиМодели.НайтиСтроки(Новый Структура("ИмяКолонки", СохраненнаяКолонка.ИмяКолонки));
	// 			СтрокиПоИмениПоля = КолонкиМодели.НайтиСтроки(Новый Структура("ИмяПоля", СохраненнаяКолонка.Имя));
				
	// 			Если СтрокиПоИмениКолонки.Количество() Тогда
	// 				КолонкаМодели = СтрокиПоИмениКолонки[0];
	// 			ИначеЕсли СтрокиПоИмениПоля.Количество() Тогда
	// 				КолонкаМодели = СтрокиПоИмениПоля[0];
	// 			Иначе
	// 				КолонкаМодели = Неопределено;
	// 			КонецЕсли;
				
	// 			Если КолонкаМодели = Неопределено Тогда
	// 				КоннекторPostgreSQL.ВыполнитьЗапрос("ALTER TABLE " + ИмяТаблицыВБазе + " DROP COLUMN " + СохраненнаяКолонка.ИмяКолонки + ";");
	// 				Приложение.ВыводВКонсоль(СтрШаблон("Колонка %1 удалена", СохраненнаяКолонка.ИмяКолонки));
	// 				ЕстьИзменения = Истина;
	// 				Продолжить;
	// 			КонецЕсли;
				
	// 			ИмяКолонкиВБазе = СохраненнаяКолонка.ИмяКолонки;
	// 			ИмяКолонкиВМодели = КолонкаМодели.ИмяКолонки;
				
	// 			СуществующиеКолонки.Добавить(ИмяКолонкиВМодели);
				
	// 			Если ИмяКолонкиВБазе <> ИмяКолонкиВМодели Тогда
	// 				КоннекторPostgreSQL.ВыполнитьЗапрос("ALTER TABLE " + ИмяТаблицыВБазе + " RENAME COLUMN " + ИмяКолонкиВБазе + " TO " + ИмяКолонкиВМодели + ";");
	// 				Приложение.ВыводВКонсоль(СтрШаблон("Изменено имя колонки с %1 на %2", ИмяКолонкиВБазе, ИмяКолонкиВМодели));
	// 				ЕстьИзменения = Истина;
	// 				ИмяКолонкиВБазе = ИмяКолонкиВМодели;
	// 			КонецЕсли;
				
	// 			ТипКолонкиВБазе = СохраненнаяКолонка.Тип;
	// 			ТипКолонкиВМодели = КолонкаМодели.ТипКолонки;
	// 			ТипКолонкиСУБД = КоннекторPostgreSQL.ПолучитьТипКолонкиСУБД(ОбъектМодели, КолонкаМодели);

	// 			// BSLLS:UsingHardcodeNetworkAddress-off
	// 			ШаблонЗапросаНаИзменениеТипа = "UPDATE %1 SET %2 = NULL;
	// 				|ALTER TABLE %1 ALTER COLUMN %2 TYPE %3 USING %2::%3%4;";
				
	// 			Если ТипКолонкиВБазе <> ТипКолонкиВМодели Тогда
	// 				ТекстЗапроса = СтрШаблон(ШаблонЗапросаНаИзменениеТипа, ИмяТаблицыВБазе, ИмяКолонкиВБазе, ТипКолонкиСУБД, "");
	// 				ТипИзменен = Истина;
	// 			ИначеЕсли Строка(КолонкаМодели.ТипСсылки) <> СохраненнаяКолонка.ТипСсылки Тогда		
	// 				ТипСсылкиСУБД = "";
	// 				Если ЗначениеЗаполнено(КолонкаМодели.ТипСсылки) Тогда
	// 					НайденныеСтрокиМоделей = ТаблицаМоделей.НайтиСтроки(Новый Структура("ТипСущности", Строка(КолонкаМодели.ТипСсылки)));
	// 					Если НЕ НайденныеСтрокиМоделей.Количество() Тогда
	// 						ВызватьИсключение "У модели " + Строка(ОбъектМодели.ТипСущности()) + " тип на который ссылается поле " + КолонкаМодели.ИмяПоля + " не существует";
	// 					КонецЕсли;
	// 					КолонкиСвязаннойМодели = НайденныеСтрокиМоделей[0].ОбъектМодели.Колонки();
	// 					СтрокиКолонкиИдентификатор = КолонкиСвязаннойМодели.НайтиСтроки(Новый Структура("Идентификатор", Истина));
	// 					ТипСсылкиСУБД = "ADD FOREIGN KEY (" + КолонкаМодели.ИмяКолонки + ") REFERENCES " + НайденныеСтрокиМоделей[0].ИмяТаблицы + "(" + СтрокиКолонкиИдентификатор[0].ИмяКолонки + ")";
	// 					ТекстЗапроса = СтрШаблон(ШаблонЗапросаНаИзменениеТипа, ИмяТаблицыВБазе, ИмяКолонкиВБазе, ТипКолонкиСУБД, ", " + ТипСсылкиСУБД);	
	// 				КонецЕсли;
	// 				ТипИзменен = Истина;
	// 			Иначе
	// 				ТипИзменен = Ложь;
	// 			КонецЕсли;
				
	// 			Если ТипИзменен Тогда
	// 				КоннекторPostgreSQL.ВыполнитьЗапрос(ТекстЗапроса);
	// 				Приложение.ВыводВКонсоль(СтрШаблон("Изменен тип колонки %1 с %2%3 на %4%5", ИмяКолонкиВБазе, ТипКолонкиВБазе, ?(ЗначениеЗаполнено(СохраненнаяКолонка.ТипСсылки), "(" + СохраненнаяКолонка.ТипСсылки + ")", ""), Строка(ТипКолонкиВМодели), ?(ЗначениеЗаполнено(КолонкаМодели.ТипСсылки), "(" + КолонкаМодели.ТипСсылки + ")", "")));
	// 				ЕстьИзменения = Истина;
	// 			КонецЕсли;
				
	// 		КонецЦикла;
			
	// 		// Выполняем создание новых колонок
	// 		Для Каждого КолонкаМодели Из КолонкиМодели Цикл
				
	// 			Если СуществующиеКолонки.Найти(КолонкаМодели.ИмяКолонки) <> Неопределено Тогда
	// 				Продолжить;
	// 			КонецЕсли;
				
	// 			ТипКолонкиСУБД = КоннекторPostgreSQL.ПолучитьТипКолонкиСУБД(ОбъектМодели, КолонкаМодели);
	// 			ТипСсылкиСУБД = "";

	// 			Если ЗначениеЗаполнено(КолонкаМодели.ТипСсылки) Тогда
	// 				НайденныеСтрокиМоделей = ТаблицаМоделей.НайтиСтроки(Новый Структура("ТипСущности", Строка(КолонкаМодели.ТипСсылки)));
	// 				Если НЕ НайденныеСтрокиМоделей.Количество() Тогда
	// 					ВызватьИсключение "У модели " + Строка(ОбъектМодели.ТипСущности()) + " тип на который ссылается поле " + КолонкаМодели.ИмяПоля + " не существует";
	// 				КонецЕсли;
	// 				КолонкиСвязаннойМодели = НайденныеСтрокиМоделей[0].ОбъектМодели.Колонки();
	// 				СтрокиКолонкиИдентификатор = КолонкиСвязаннойМодели.НайтиСтроки(Новый Структура("Идентификатор", Истина));
	// 				ТипСсылкиСУБД = "ADD FOREIGN KEY (" + КолонкаМодели.ИмяКолонки + ") REFERENCES " + НайденныеСтрокиМоделей[0].ИмяТаблицы + "(" + СтрокиКолонкиИдентификатор[0].ИмяКолонки + ")";	
	// 			КонецЕсли;				

	// 			КоннекторPostgreSQL.ВыполнитьЗапрос("ALTER TABLE " + ИмяТаблицыВБазе + " ADD COLUMN " + КолонкаМодели.ИмяКолонки + " " + ТипКолонкиСУБД + ?(ТипСсылкиСУБД = "", "", ", " + ТипСсылкиСУБД) + ";");
	// 			Приложение.ВыводВКонсоль(СтрШаблон("Добавлена новая колонка %1 с типом %2 в таблицу %3", КолонкаМодели.ИмяКолонки, ТипКолонкиСУБД, ИмяТаблицыВБазе));
	// 			ЕстьИзменения = Истина;
				
	// 		КонецЦикла;
			
	// 	КонецЦикла;
		
	// 	Приложение.ВыводВКонсоль("Запись текущего состояния структуры базы данных в хранилище");
	// 	ТекущаяСтруктураТаблиц = ТекущееСостояниеТаблиц();
	// 	ЗаписатьСостояниеТаблиц(ТекущаяСтруктураТаблиц);
		
	// 	КоннекторPostgreSQL.ЗафиксироватьТранзакцию();
		
	// 	КоннекторPostgreSQL.Закрыть();
		
	// 	Если ЕстьИзменения Тогда
	// 		Приложение.ВыводВКонсоль("Изменения в базу данных успешно внесены");
	// 	Иначе
	// 		Приложение.ВыводВКонсоль("Изменения в структуре базы данных отсутствуют");
	// 	КонецЕсли;
		
	// Исключение
	// 	КоннекторPostgreSQL.ОтменитьТранзакцию();
	// 	КоннекторPostgreSQL.Закрыть();
	// 	Приложение.ВыводВКонсоль("Возникла ошибка в процессе внесения изменений в структуру базы данных:");
	// 	Приложение.ВыводВКонсоль(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	// КонецПопытки;

	// МенеджерСущностей.Инициализировать();
	// Приложение.УстановитьМенеджерСущностей(МенеджерСущностей);
	
	// ВыполнитьСборкуМусора();
	
КонецПроцедуры

// Проверяет, является ли класс моделью данных
//
// Параметры:
//   ТипКласса - Тип - Тип, в котором проверяется наличие необходимых аннотаций.
//
// Возвращаемое значение:
//	 Булево - Истина если класс это модель
//
Функция КлассЯвляетсяМоделью(ТипКласса)
	
	// РефлекторОбъекта = Новый РефлекторОбъекта(ТипКласса);
	// ТаблицаМетодов = РефлекторОбъекта.ПолучитьТаблицуМетодов("Сущность", Ложь);
	// ТаблицаСвойств = РефлекторОбъекта.ПолучитьТаблицуСвойств("Идентификатор");
	
	// Возврат ТаблицаМетодов.Количество() И ТаблицаСвойств.Количество();
	
КонецФункции

#КонецОбласти