// BSLLS:DuplicateStringLiteral-off
// BSLLS:NumberOfValuesInStructureConstructor-off
#Использовать fs
#Использовать asserts
#Использовать json
#Использовать sql

// Глобальный объект модуля менеджера сущностей
Перем МенеджерСущностей;
// Таблица значений хранящая все модели приложения
Перем ТаблицаМоделей;
// Путь хранения json с сохраненным в базе данных состоянием таблиц
Перем ПутьКФайлуСостоянияТаблиц;
// Строка соединения к базе данных
Перем СтрокаСоединения;
// Последнее соединение
Перем ТекущееСоединение;
Перем ПоследнееСообщениеОбОшибке;
// Экземпляр коннектора базы данных
Перем КоннекторPostgreSQL;

// Инициализирует необходимые данные для работы с базой данных
//
Процедура Инициализировать() Экспорт

	ПутьКФайлуСостоянияТаблиц = ОбъединитьПути(Служебное.КаталогПриложения(), "tables.json");
	НастройкиПодключения = Настройки.Получить("Приложение.БазаДанных");
	ТекстОшибкиПодключения = "";
	
	Если НастройкиПодключения = Неопределено Тогда
		Лог.Ошибка("Настройки подключения к базе данных не инициализированы");
		Возврат;
	КонецЕсли;

	СтрокаСоединения = СтрШаблон("Host=%1;Username=%2;Password=%3;Database=%4;port=%5;",
								НастройкиПодключения.Адрес,
								НастройкиПодключения.Пользователь,
								НастройкиПодключения.Пароль,
								НастройкиПодключения.ИмяБазы,
								НастройкиПодключения.Порт);

	ТекущееСоединение = Новый Соединение();
	ТекущееСоединение.ТипСУБД = ТекущееСоединение.ТипыСУБД.PostgreSQL;
	ТекущееСоединение.СтрокаСоединения = СтрокаСоединения;
	ТекущееСоединение.Открыть();

	ПоследнееСообщениеОбОшибке = ТекущееСоединение.ПоследнееСообщениеОбОшибке;

	Если ТекущееСоединение.Открыто Тогда
		Лог.Информация("Подключение к базе данных выполнено успешно");
	Иначе
		Лог.Ошибка(СтрШаблон("Подключение к базе данных не возможно, по причине: %1", ТекстОшибкиПодключения));
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаСуществует(ИмяТаблицы)
	
	ТекстЗапроса = "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = '%1')";

	Запрос = Новый Запрос();
	Запрос.УстановитьСоединение(ТекущееСоединение);
	Запрос.Текст = СтрШаблон(ТекстЗапроса, ИмяТаблицы);
	Возврат Булево(Запрос.ВыполнитьКоманду());

КонецФункции

Функция ПреобразоватьВТипSQL(Тип, ПараметрыТипа = Неопределено) Экспорт
	
	СоответствиеТипов = Новый Соответствие();
	СоответствиеТипов.Вставить(Тип("Строка"), "VARCHAR, TEXT");
	СоответствиеТипов.Вставить(Тип("Число"), "NUMERIC(precision, scale)");
	СоответствиеТипов.Вставить(Тип("Дата"), "TIMESTAMP");
	СоответствиеТипов.Вставить(Тип("Булево"), "BOOLEAN");
	СоответствиеТипов.Вставить(Тип("ДвоичныеДанные"), "BYTEA");
	СоответствиеТипов.Вставить(Тип("УникальныйИдентификатор"), "UUID");

	НайденныйТип = СоответствиеТипов[Тип];

	Если НайденныйТип = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Обработка типа строка
	Если Тип = Тип("Строка") Тогда
		
		Длина = Неопределено;
		
		Если НЕ ПараметрыТипа.Свойство("Длина", Длина) Тогда
			Лог.Ошибка("У типа Строка не переданы параметры");
			Возврат Неопределено;
		КонецЕсли;

		Если Длина = 0 Тогда
			Возврат "TEXT";
		Иначе
			Возврат СтрШаблон("VARCHAR(%1)", Строка(Длина));
		КонецЕсли;

	КонецЕсли;

	// Обработка типа число
	Если Тип = Тип("Число") Тогда
		
		Длина = 0;
		Точность = 0;

		Если НЕ ПараметрыТипа.Свойство("Длина", Длина) ИЛИ НЕ ПараметрыТипа.Свойство("Точность", Точность) Тогда
			Лог.Ошибка("У типа Число не переданы параметры");
			Возврат Неопределено;
		КонецЕсли;

		Возврат СтрШаблон("NUMERIC(%1, %2)", Строка(Длина), Строка(Точность));

	КонецЕсли;

	Возврат НайденныйТип;

КонецФункции

Функция ОбъектЯвляетсяМоделью(ПроверяемыйОбъект) Экспорт
	
	ИмяТаблицы = "";
	Тип = ТипЗнч(ПроверяемыйОбъект);

	Если НЕ Рефлексия.МетодСуществует(ПроверяемыйОбъект, "ПриСозданииОбъекта") Тогда
		Лог.Предупреждение(СтрШаблон("У типа %1 не объявлен метод 'ПриСозданииОбъекта'", Строка(Тип)));
		Возврат Ложь;	
	КонецЕсли;

	Аннотации = Рефлексия.АннотацииМетода(ПроверяемыйОбъект, "ПриСозданииОбъекта");

	Если НЕ Аннотации.Свойство("Модель") Тогда
		Лог.Предупреждение(СтрШаблон("У типа %1 отсутствует аннотация 'Модель'", Строка(Тип)));
		Возврат Ложь;
	КонецЕсли;

	Если НЕ Аннотации.Модель.Свойство("Имя", ИмяТаблицы) Тогда
		Лог.Предупреждение(СтрШаблон("У типа %1 в аннотации 'Модель' не указан параметр 'Имя'", Строка(Тип)));
		Возврат Ложь;
	КонецЕсли;

	Если НЕ Служебное.СоответствуетCamelCase(ИмяТаблицы) Тогда
		Шаблон = "У типа %1 имя таблицы содержит кириллические символы или не соответствует CamelCase";
		Лог.Предупреждение(СтрШаблон(Шаблон, Строка(Тип)));
	КонецЕсли;

	Свойства = Рефлексия.ПолучитьТаблицуСвойств(ПроверяемыйОбъект);
	СвойствоИдентификатор = Неопределено;
	ПрисутствуютОшибки = Ложь;

	Для каждого СтрокаСвойства Из Свойства Цикл

		АннотацииСвойства = Рефлексия.АннотацииСвойства(ПроверяемыйОбъект, СтрокаСвойства.Имя);

		Если АннотацииСвойства.Свойство("Идентификатор") Тогда
			СвойствоИдентификатор = СтрокаСвойства;
		КонецЕсли;

		Если НЕ АннотацииСвойства.Свойство("Поле") Тогда
			Продолжить;
		КонецЕсли;

		ИмяКолонки = "";

		Если НЕ АннотацииСвойства.Поле.Свойство("Имя", ИмяКолонки) Тогда
			Лог.Предупреждение(СтрШаблон("У типа %1 в свойстве %2 не указано имя колонки", Строка(Тип), СтрокаСвойства.Имя));
			ПрисутствуютОшибки = Истина;
			Продолжить;
		КонецЕсли;

		Если НЕ Служебное.СоответствуетCamelCase(ИмяКолонки) Тогда
			Шаблон = "У типа %1 в свойстве %2 имя содержит кириллические символы или не соответствует CamelCase";
			Лог.Предупреждение(СтрШаблон(Шаблон, Строка(Тип), СтрокаСвойства.Имя));
			ПрисутствуютОшибки = Истина;
			Продолжить;
		КонецЕсли;

		Если НЕ АннотацииСвойства.Поле.Свойство("Тип", ИмяКолонки) Тогда
			Лог.Предупреждение(СтрШаблон("У типа %1 в свойстве %2 не указан тип", Строка(Тип), СтрокаСвойства.Имя));
			ПрисутствуютОшибки = Истина;
			Продолжить;
		КонецЕсли;

	КонецЦикла;

	Если СвойствоИдентификатор = Неопределено Тогда
		Лог.Предупреждение(СтрШаблон("У типа %1 не обнаружено свойство идентификатор", Строка(Тип)));
		Возврат Ложь;
	КонецЕсли;

	Возврат НЕ ПрисутствуютОшибки;

КонецФункции