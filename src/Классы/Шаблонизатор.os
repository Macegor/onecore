// BSLLS:UnusedLocalMethod-off
// BSLLS:FunctionShouldHaveReturn-off
Перем КодВыполнения;
Перем ЧастиШаблона;
Перем РегулярноеВыражение;
Перем ОбщийКонтекст;
Перем ОбъектПредставления;
Перем РасширяемыйШаблон;
Перем ТекстШаблона;

Процедура ПриСозданииОбъекта(Представление, КлючШаблона)

	ОбъектПредставления = Представление;
	
	ТекстШаблона = ТекстШаблонаПоПути(КлючШаблона);

	РегулярноеВыражение = Новый РегулярноеВыражение("(\{\{[^}]+\}\})|(\{%[^%]+%\})");

	ПодготовитьКодШаблона();
	
КонецПроцедуры

Функция Сформировать(Контекст = Неопределено, ГлобальныйКонтекст = Неопределено) Экспорт

	ОбщийКонтекст = ?(ГлобальныйКонтекст <> Неопределено, ГлобальныйКонтекст, Контекст);
	Результат = Новый Массив;

	ЗаполнитьМассивКодом(Результат, Контекст);

	ТекстОтображения = СтрСоединить(Результат, "");

	Если ЗначениеЗаполнено(РасширяемыйШаблон) Тогда
		
		Шаблонизатор = Новый Шаблонизатор(ОбъектПредставления, РасширяемыйШаблон);
		ТекстРасширяемогоШаблона = Шаблонизатор.Сформировать(Контекст, ОбщийКонтекст);
		БлокиШаблона = НайтиВсеБлокиВШаблоне(ТекстРасширяемогоШаблона);
		
		Если БлокиШаблона.Количество() Тогда
			
			Для Каждого ИмяБлока Из БлокиШаблона Цикл
				
				Если НЕ СтрНайти(ТекстОтображения, ИмяБлока) Тогда
					Продолжить;
				КонецЕсли;
				
				ТекстБлока = ПолучитьТекстМеждуТегами(ТекстОтображения, ИмяБлока);
				ТекстРасширяемогоШаблона = СтрЗаменить(ТекстРасширяемогоШаблона, Блок(ИмяБлока), ТекстБлока);
				
			КонецЦикла;
			
			ТекстОтображения = ТекстРасширяемогоШаблона;
		Иначе
			ТекстОтображения = УдалитьТегиИзТекста(ТекстОтображения);
		КонецЕсли;
		
	КонецЕсли;

	Возврат ТекстОтображения;

КонецФункции

Процедура ПодготовитьКодШаблона()

	ИнициализацияПеременных();

	Совпадения = РегулярноеВыражение.НайтиСовпадения(ТекстШаблона);

	Позиция = 1;

	Для Каждого Совпадение из Совпадения Цикл
		ТекущаяПозиция = Совпадение.Индекс + 1;
		Если ТекущаяПозиция > Позиция Тогда
			Ид = ДобавитьЧастьШаблона(Сред(ТекстШаблона, Позиция, ТекущаяПозиция - Позиция));
			ЧастьКодаВставкаЧастиШаблона(Ид);
		КонецЕсли;

		ДобавитьЧастьКода(Сред(Совпадение.Значение, 3, Совпадение.Длина - 4), 
								ЭтоВыражение(Совпадение.Значение));

		Позиция = ТекущаяПозиция + Совпадение.Длина;

	КонецЦикла;

	ДлинаТекста = СтрДлина(ТекстШаблона) + 1;

	Если Позиция < ДлинаТекста Тогда
		Ид = ДобавитьЧастьШаблона(Прав(ТекстШаблона, ДлинаТекста - Позиция));
		ЧастьКодаВставкаЧастиШаблона(Ид);
	КонецЕсли;

КонецПроцедуры

Функция ЭтоВыражение(Текст)
	Возврат СтрНачинаетсяС(Текст, "{{");
КонецФункции

Процедура ИнициализацияПеременных()

	КодВыполнения = Новый Массив();
	ЧастиШаблона = Новый Соответствие();
	
КонецПроцедуры

Процедура ЗаполнитьМассивКодом(Результат, Контекст)

	Модель = Контекст;
	ВесьКод = СтрСоединить(КодВыполнения);
	Выполнить(ВесьКод);
	
КонецПроцедуры

Процедура ДобавитьЧастьКода(ЧастьКода, ЭтоВыражение)

	Если ЭтоВыражение Тогда
		КодКДобавлению = СтрШаблон("_Значение = Строка(%1);
									|Результат.Добавить(_Значение);", ЧастьКода);
		КодВыполнения.Добавить(КодКДобавлению + Символы.ПС);
	Иначе
		КодВыполнения.Добавить(ЧастьКода + Символы.ПС);
	КонецЕсли;

КонецПроцедуры

Процедура ЧастьКодаВставкаЧастиШаблона(Ид)

	Код = СтрШаблон("Результат.Добавить(ЧастиШаблона[""%1""]);", Ид);
	КодВыполнения.Добавить(Код + Символы.ПС);
	
КонецПроцедуры

Функция ДобавитьЧастьШаблона(Строка)

	Ид = ХешироватьСтроку(Строка);
	
	ЧастиШаблона.Вставить(Ид, Строка);

	Возврат Ид;
	
КонецФункции

Функция ХешироватьСтроку(Строка)  
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
	
	Хеширование.Добавить(Строка);
	
	Возврат Base64Строка(Хеширование.ХешСумма);
	
КонецФункции

Функция НовыйЭкземплярШаблона(ТекстШаблона)

	Возврат Новый Шаблон(ТекстШаблона);

КонецФункции

Функция Вложить(КлючШаблона, Контекст = Неопределено)
	
	ПередаваемыйКонтекст = ?(Контекст = Неопределено, ОбщийКонтекст, Контекст);

	ВложенныйШаблон = Новый Шаблонизатор(ОбъектПредставления, КлючШаблона);
	Возврат ВложенныйШаблон.Сформировать(ПередаваемыйКонтекст, ОбщийКонтекст);
	
КонецФункции

Функция Расширить(КлючШаблона)
	
	РасширяемыйШаблон = КлючШаблона;
	
КонецФункции

Функция Блок(ИмяБлока)
	Возврат СтрШаблон("<<%1>>", ИмяБлока);
КонецФункции

Функция Поместить(ИмяБлока)
	Возврат Блок(ИмяБлока);
КонецФункции

Функция КонецПомещения()
	Возврат "<</>>";
КонецФункции

Функция Ресурс(ПутьРесурса)
	
	Если НЕ ЗначениеЗаполнено(ПутьРесурса) Тогда
		Лог.Ошибка("Не верный или пустой путь к ресурсу");
		Возврат "";
	КонецЕсли;
	
	ЧастиПутейРесурса = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(ПутьРесурса, "/", Истина, Истина);
	ПутьКФайлуРесурса = "/";
	МенеджерКомпонентов = Приложение.МенеджерКомпонентов();
	
	ТекущийКомпонент = МенеджерКомпонентов.НайтиПоКлючуОбъекта(ОбъектПредставления);
	ЛатинскоеИмяКомпонента = ТекущийКомпонент.ИмяЛатинское();
	НачинаетсяСИмениКомпонента = Истина;
	
	Если ЧастиПутейРесурса[0] <> ТекущийКомпонент.Имя() Тогда
		
		КомпонентРесурса = МенеджерКомпонентов.НайтиПоКлючуОбъекта(ЧастиПутейРесурса[0]);
		НачинаетсяСИмениКомпонента = Ложь;
		
		Если КомпонентРесурса <> Неопределено Тогда
			ЛатинскоеИмяКомпонента = КомпонентРесурса.ИмяЛатинское();
		Иначе
			НачинаетсяСИмениКомпонента = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ НачинаетсяСИмениКомпонента Тогда
		ПутьКФайлуРесурса = ПутьКФайлуРесурса + ЛатинскоеИмяКомпонента;
	КонецЕсли;
	
	Для Счетчик = 0 По ЧастиПутейРесурса.Количество() - 1 Цикл
		Если Счетчик = 0 Тогда
			Если НачинаетсяСИмениКомпонента Тогда
				ПутьКФайлуРесурса = ПутьКФайлуРесурса + ЛатинскоеИмяКомпонента;
			Иначе
				ПутьКФайлуРесурса = ПутьКФайлуРесурса + "/" + ЧастиПутейРесурса[Счетчик];
			КонецЕсли;
		Иначе
			ПутьКФайлуРесурса = ПутьКФайлуРесурса + "/" + ЧастиПутейРесурса[Счетчик];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПутьКФайлуРесурса;
	
КонецФункции

Функция ТекстШаблонаПоПути(Знач КлючШаблона)
		
	Если НЕ СтрНайти(КлючШаблона, ".Шаблоны.") Тогда
		ИмяКомпонента = Лев(КлючШаблона, СтрНайти(КлючШаблона, ".") - 1);
		Ключ = СтрЗаменить(КлючШаблона, ИмяКомпонента, ИмяКомпонента + ".Шаблоны");
	Иначе
		Ключ = КлючШаблона;
	КонецЕсли;
	
	Если СтрНачинаетсяС(КлючШаблона, "OneCore") Тогда
		Ключ = СтрЗаменить(Ключ, "OneCore.", "");
		ПутьКФайлуШаблона = ОбъединитьПути(Служебное.КаталогБиблиотеки(), "src", "Служебное");
	Иначе
		ПутьКФайлуШаблона = Служебное.КаталогПриложения();
	КонецЕсли;
	
	ЧастиПутейШаблона = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(Ключ, ".", Истина, Истина);
	
	Для Каждого ЧастьПути Из ЧастиПутейШаблона Цикл
		ПутьКФайлуШаблона = ОбъединитьПути(ПутьКФайлуШаблона, ЧастьПути);
	КонецЦикла;
	
	ПутьКФайлуШаблона = ПутьКФайлуШаблона + ".html";
	
	Если НЕ ФС.ФайлСуществует(ПутьКФайлуШаблона) Тогда
		ВызватьИсключение СтрШаблон("Не найден файл шаблона по пути: %1", ПутьКФайлуШаблона);
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКФайлуШаблона);

	Возврат ТекстовыйДокумент.ПолучитьТекст();
	
КонецФункции


// Функция извлекает текст между тегами <<параметр>> и <</>>
//
// Параметры:
//   ТекстШаблона - Строка - Текст, в котором производится поиск
//   ИмяПараметра - Строка - Имя параметра для поиска
//
// Возвращаемое значение:
//   Строка - Найденный текст между тегами
//
Функция ПолучитьТекстМеждуТегами(Знач ТекстШаблона, Знач ИмяПараметра)
	
	НачальныйТег = "<<" + ИмяПараметра + ">>";
	КонечныйТег = "<</>>";
	
	ПозицияНачала = СтрНайти(ТекстШаблона, НачальныйТег);
	Если ПозицияНачала = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ПозицияНачалаТекста = ПозицияНачала + СтрДлина(НачальныйТег);
	ПозицияКонца = СтрНайти(ТекстШаблона, КонечныйТег, , ПозицияНачалаТекста);
	
	Если ПозицияКонца = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Сред(ТекстШаблона, ПозицияНачалаТекста, ПозицияКонца - ПозицияНачалаТекста);
	
КонецФункции

// Функция возвращает массив имен всех блоков в шаблоне
//
// Параметры:
//   ТекстШаблона - Строка - Текст шаблона для поиска блоков
//
// Возвращаемое значение:
//   Массив - Массив имен найденных блоков без тегов
//
Функция НайтиВсеБлокиВШаблоне(Знач ТекстШаблона) Экспорт
	
	МассивБлоков = Новый Массив;
	ТекущаяПозиция = 1;
	
	Пока Истина Цикл
		НачалоБлока = СтрНайти(ТекстШаблона, "<<", , ТекущаяПозиция);
		
		Если НачалоБлока = 0 Тогда
			Прервать;
		КонецЕсли;
		
		КонецБлока = СтрНайти(ТекстШаблона, ">>", , НачалоБлока);
		
		Если КонецБлока = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ИмяБлока = Сред(ТекстШаблона, НачалоБлока + 2, КонецБлока - НачалоБлока - 2);
		
		Если ИмяБлока <> "/" Тогда
			МассивБлоков.Добавить(ИмяБлока);
		КонецЕсли;
		
		ТекущаяПозиция = КонецБлока + 2;
	КонецЦикла;
	
	Возврат МассивБлоков;
	
КонецФункции

// Процедура удаляет из текста все теги и их содержимое
//
// Параметры:
//   ТекстШаблона - Строка - Исходный текст для обработки
//
// Возвращаемое значение:
//   Строка - Текст с удаленными тегами
//
Функция УдалитьТегиИзТекста(Знач ТекстШаблона) Экспорт
	
	ОбработанныйТекст = ТекстШаблона;
	ТекущаяПозиция = 1;
	
	Пока Истина Цикл
		НачалоБлока = СтрНайти(ОбработанныйТекст, "<<", , ТекущаяПозиция);
		
		Если НачалоБлока = 0 Тогда
			Прервать;
		КонецЕсли;
		
		КонецБлока = СтрНайти(ОбработанныйТекст, ">>", , НачалоБлока);
		
		Если КонецБлока = 0 Тогда
			Прервать;
		КонецЕсли;
		
		// Удаляем найденный блок
		ОбработанныйТекст = Лев(ОбработанныйТекст, НачалоБлока - 1) +
			Сред(ОбработанныйТекст, КонецБлока + 2);
		
		ТекущаяПозиция = НачалоБлока;
	КонецЦикла;
	
	Возврат ОбработанныйТекст;
	
КонецФункции