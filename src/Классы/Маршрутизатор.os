#Использовать fs

Перем Маршруты;
Перем СвойстваПоУмолчанию;

Процедура ПриСозданииОбъекта(СвойстваМаршрутовПоУмолчанию)
	
	Маршруты = Новый КоллекцияМаршрутов();
	СвойстваПоУмолчанию = СвойстваМаршрутовПоУмолчанию;

	СформироватьМаршруты();
	
КонецПроцедуры

Процедура СформироватьМаршруты()
	
	ПроцедураФормированияМаршрутов = "ПриФормированииМаршрутов";
	МенеджерКомпонентов = Приложение.МенеджерКомпонентов();
	Компоненты = МенеджерКомпонентов.Компоненты();
	КомпонентКорняСтатическихФайлов = МенеджерКомпонентов.КомпонентКорняСтатическихФайлов();
	КаталогПриложения = Служебное.КаталогПриложения();
	
	Для Каждого Компонент Из Компоненты Цикл
		
		МодульКомпонента = Компонент.МодульКомпонента();
		ИмяКомпонента = Компонент.Имя();
		ПутьКомпонента = ОбъединитьПути(КаталогПриложения, ИмяКомпонента);
		
		Лог.Отладка("Формирование маршрутов компонента " + ИмяКомпонента);
		
		Если НЕ Рефлексия.МетодСуществует(МодульКомпонента, ПроцедураФормированияМаршрутов) Тогда
			Лог.Предупреждение("Отсутствует процедура формирования маршрутов");
			Продолжить;
		КонецЕсли;
		
		КоллекцияМаршрутов = Новый КоллекцияМаршрутов(Компонент, СвойстваПоУмолчанию);
		
		МассивПараметров = Новый Массив();
		МассивПараметров.Добавить(КоллекцияМаршрутов);
		
		Рефлексия.ВызватьМетод(МодульКомпонента, ПроцедураФормированияМаршрутов, МассивПараметров);
		
		// Автодобавление маршрутов статических файлов
		ПутьКРесурсам = ОбъединитьПути(ПутьКомпонента, "Ресурсы");
		
		СформироватьМаршрутыРесурсов(ПутьКРесурсам, Компонент, КоллекцияМаршрутов, КомпонентКорняСтатическихФайлов);
		
		Для Каждого Маршрут Из КоллекцияМаршрутов Цикл
			НовыйМаршрут = Маршруты.Добавить(Маршрут.Адрес(), Маршрут.КлючОбъекта(), Маршрут.Статический());
			Рефлексия.УстановитьСвойство(НовыйМаршрут, "Компонент", Маршрут.Компонент());
			Рефлексия.УстановитьСвойство(НовыйМаршрут, "Имя", Маршрут.Имя());
			Коллекции.ДополнитьСтруктуру(НовыйМаршрут.Свойства(), Маршрут.Свойства());
		КонецЦикла;
		
		ОсвободитьОбъект(КоллекцияМаршрутов);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьМаршрутыРесурсов(ПутьКРесурсам, Компонент, КоллекцияМаршрутов, КомпонентКорняСтатическихФайлов)
	
	ИмяКомпонента = Компонент.Имя();
	ИмяКомпонентаЛатинское = Компонент.ИмяЛатинское();
	КаталогПриложения = Служебное.КаталогПриложения();
	
	Если НЕ ФС.КаталогСуществует(ПутьКРесурсам) Тогда
		Лог.Отладка(СтрШаблон("В компоненте ""%1"" отсутствует каталог с ресурсам", ИмяКомпонента));
		Возврат;
	КонецЕсли;
	
	ФайлыРесурсов = НайтиФайлы(ПутьКРесурсам, "*.*", Истина);
	
	Для Каждого ФайлРесурса Из ФайлыРесурсов Цикл
		
		ОтносительныйПуть = СтрЗаменить(ФайлРесурса.ПолноеИмя, КаталогПриложения, "");
		ОтносительныйПуть = Прав(ОтносительныйПуть, СтрДлина(ОтносительныйПуть) - 1);
		ПутьБезКомпонента = Прав(ОтносительныйПуть, СтрДлина(ОтносительныйПуть) - СтрДлина(ИмяКомпонента));
		
		Если Компонент = КомпонентКорняСтатическихФайлов Тогда
			ПутьОтКорня = СтрЗаменить(ПутьБезКомпонента, "Ресурсы", "");
			ПутьОтКорня = СтрЗаменить(Прав(ПутьОтКорня, СтрДлина(ПутьОтКорня) - 1), "\", "/");
			КоллекцияМаршрутов.Добавить(ПутьОтКорня, ФайлРесурса.ПолноеИмя, Истина);
		КонецЕсли;
		
		ПутьОтКомпонента = СтрЗаменить(СтрЗаменить(ПутьБезКомпонента, "Ресурсы", ИмяКомпонентаЛатинское), "\", "/");
		КоллекцияМаршрутов.Добавить(ПутьОтКомпонента, ФайлРесурса.ПолноеИмя, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодставитьПараметрыВАдрес(Знач Адрес, Парам1 = Неопределено, Парам2 = Неопределено, Парам3 = Неопределено, 
	Парам4 = Неопределено, Парам5 = Неопределено, Парам6 = Неопределено) Экспорт
	
	// Создаем массив переданных параметров
	МассивПараметров = Новый Массив;
	
	Если Парам1 <> Неопределено Тогда
		МассивПараметров.Добавить(Парам1);
	КонецЕсли;
	
	Если Парам2 <> Неопределено Тогда
		МассивПараметров.Добавить(Парам2);
	КонецЕсли;
	
	Если Парам3 <> Неопределено Тогда
		МассивПараметров.Добавить(Парам3);
	КонецЕсли;
	
	Если Парам4 <> Неопределено Тогда
		МассивПараметров.Добавить(Парам4);
	КонецЕсли;
	
	Если Парам5 <> Неопределено Тогда
		МассивПараметров.Добавить(Парам5);
	КонецЕсли;
	
	Если Парам6 <> Неопределено Тогда
		МассивПараметров.Добавить(Парам6);
	КонецЕсли;
		
	// Разбиваем адрес на части
	ЧастиАдреса = СтрРазделить(Адрес, "/", Ложь);
	ИндексПараметра = 0;
	
	// Проходим по всем частям адреса
	Для Индекс = 0 По ЧастиАдреса.ВГраница() Цикл
		ТекущаяЧасть = ЧастиАдреса[Индекс];
		
		// Проверяем, является ли часть параметром
		Если СтрНачинаетсяС(ТекущаяЧасть, "<") И СтрЗаканчиваетсяНа(ТекущаяЧасть, ">") Тогда
			
			// Проверяем наличие параметра для подстановки
			Если ИндексПараметра < МассивПараметров.Количество() Тогда
				ЧастиАдреса[Индекс] = МассивПараметров[ИндексПараметра];
				ИндексПараметра = ИндексПараметра + 1;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	// Собираем адрес обратно
	Возврат "/" + СтрСоединить(ЧастиАдреса, "/");
	
КонецФункции

Функция НайтиМаршрут(Контекст) Экспорт
	
	Возврат Маршруты.НайтиПоАресу(Контекст.Запрос.Путь);

КонецФункции

Функция НайтиМаршрутПоИмени(Имя) Экспорт
	
	Возврат Маршруты.НайтиПоИмени(Имя);

КонецФункции

Функция АдресМаршрутаПоИмени(Имя, Парам1 = Неопределено, Парам2 = Неопределено, Парам3 = Неопределено, 
	Парам4 = Неопределено, Парам5 = Неопределено, Парам6 = Неопределено) Экспорт
	
	НайденныйМаршрут = НайтиМаршрутПоИмени(Имя);
	ПодставляемыйАдрес = "#";

	Если НайденныйМаршрут <> Неопределено Тогда
		ПодставляемыйАдрес = ПодставитьПараметрыВАдрес(НайденныйМаршрут.Адрес(), Парам1, Парам2, Парам3, Парам4, Парам5, Парам6);
	КонецЕсли;

	Возврат ПодставляемыйАдрес;

КонецФункции

Процедура ПеренаправитьВыполнение(Контекст) Экспорт
	
	Запрос = Контекст.Запрос;
	Ответ = Контекст.Ответ;
	
	Ответ.КодСостояния = 200;
	
	ТипЗапроса = Запрос.Метод;
	
	Адрес = Запрос.Путь;
	Маршрут = Контекст.Маршрут;
		
	Если Маршрут.Статический() Тогда
		
		ПутьКФайлу = Маршрут.КлючОбъекта();
		Файл = Новый Файл(ПутьКФайлу);
		
		Если НЕ Файл.Существует() Тогда
			Ответ.КодСостояния = 404;
		Иначе
			РасширениеБезТочки = Файл.Расширение;
			Ответ.ТипКонтента = ВебСерверСлужебное.ОпределитьТипСодержимого(РасширениеБезТочки);
			Поток = ФайловыеПотоки.ОткрытьДляЧтения(ПутьКФайлу);
			Поток.КопироватьВ(Ответ.Тело);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	МенеджерОбъектов = Приложение.МенеджерОбъектов();
	ЗначенияСвойствОбъекта = Новый Структура("Контекст", Контекст);

	Для каждого КлючЗначение Из Контекст Цикл
		ЗначенияСвойствОбъекта.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;

	ИсполняемыйОбъект = МенеджерОбъектов.СоздатьОбъект(Маршрут.КлючОбъекта(), Неопределено, ЗначенияСвойствОбъекта);
	
	Если ИсполняемыйОбъект = Неопределено Тогда
		Ответ.КодСостояния = 500;
		СтруктураОтвета = Новый Структура("massage", "Ошибка при создании объекта по ключу: " + Маршрут.КлючОбъекта());
		Ответ.Записать(Сериализация.СериализоватьJSON(СтруктураОтвета), КодировкаТекста.UTF8);
		Возврат;
	КонецЕсли;
	
	МассивПараметровВызова = Новый Массив();
	
	Если Маршрут.СодержитПараметры() Тогда
		
		ЧастиМаршрутаЗапроса = СтрРазделить(Адрес, "/", Ложь);
		ЧастиНайденногоМаршрута = СтрРазделить(Маршрут.Адрес(), "/", Ложь);
		СоответствиеЧастей = Новый Соответствие();
		
		Для Индекс = 0 По ЧастиМаршрутаЗапроса.Количество() - 1 Цикл
			СоответствиеЧастей.Вставить(ЧастиНайденногоМаршрута[Индекс], ЧастиМаршрутаЗапроса[Индекс]);
		КонецЦикла;
		
		Для Каждого КлючЗначение Из СоответствиеЧастей Цикл
			
			ДанныеПараметра = Маршруты.ДанныеЧастиМаршрутаПараметром(КлючЗначение.Ключ);
			
			Если ДанныеПараметра <> Неопределено Тогда
				МассивПараметровВызова.Добавить(КлючЗначение.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ Рефлексия.МетодСуществует(ИсполняемыйОбъект, ТипЗапроса) Тогда
		Ответ.КодСостояния = 405;
		Возврат;
	КонецЕсли;
	
	АннотацииМетода = Рефлексия.АннотацииМетода(ИсполняемыйОбъект, ТипЗапроса);
	
	// Для отправленных форм от браузера штатным образом помещаем входящие данные в контекст
	Если Запрос.ТипКонтента = "application/x-www-form-urlencoded" Тогда
		
		ТелоСтрокой = ВебСерверСлужебное.ТелоКакСтрокаИзЗапроса(Контекст.Запрос);
		ВходящиеПараметры = Сериализация.РазобратьТелоЗапросаAXWWWFU(ТелоСтрокой);
		
		Для Каждого Параметр Из ВходящиеПараметры Цикл
			Если Контекст.Данные.Свойство(Параметр.Ключ) Тогда
				Контекст.Данные[Параметр.Ключ] = Параметр.Значение;
			Иначе
				Контекст.Данные.Вставить(Параметр.Ключ, Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Рефлексия.МетодСуществует(ИсполняемыйОбъект, "Инициализация") Тогда
		Рефлексия.ВызватьМетод(ИсполняемыйОбъект, "Инициализация");
	КонецЕсли;

	Контекст.Ответ.ТипКонтента = ?(Контекст.ЗапросОтБраузера, "text/html", "application/json");

	Если АннотацииМетода.Свойство("ПараметрыОтвета") Тогда
		Если ТипЗнч(АннотацииМетода.ПараметрыОтвета) = Тип("Структура") Тогда
			АннотацииМетода.ПараметрыОтвета.Свойство("КодОтвета", Контекст.Ответ.КодСостояния);
			АннотацииМетода.ПараметрыОтвета.Свойство("ТипСодержимого", Контекст.Ответ.ТипКонтента);
		КонецЕсли;
	КонецЕсли;
	
	Рефлексия.ВызватьМетод(ИсполняемыйОбъект, ТипЗапроса, МассивПараметровВызова);
	
	// Если не указана кодировка, то добавляем UTF-8
	Если СтрНайти(Ответ.ТипКонтента, "") ИЛИ НЕ СтрНайти(НРег(Строка(Ответ.ТипКонтента)), "charset=") Тогда
		Ответ.ТипКонтента = Ответ.ТипКонтента + "; charset=utf-8";
	КонецЕсли;

	Если СокрЛП(Контекст.АдресПеренаправления) <> "" Тогда
		Контекст.Ответ.КодСостояния = 303;
		Ответ.Заголовки.Добавить("Location", Контекст.АдресПеренаправления);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контекст.Ответ.КодСостояния) Тогда
		Контекст.Ответ.КодСостояния = 200;
	КонецЕсли;
	
	Если АннотацииМетода.Свойство("ФормироватьШаблон") Тогда
		Шаблонизатор = Новый Шаблонизатор(ИсполняемыйОбъект, АннотацииМетода.ФормироватьШаблон);
		ТекстОтвета = Шаблонизатор.Сформировать(Контекст);
		Контекст.Ответ.Записать(ТекстОтвета);
	КонецЕсли;
	
КонецПроцедуры
