
Перем Идентификатор;
Перем ДатаСоздания;
Перем ПоследняяАктивность;
Перем ВремяЖизни;
Перем Параметры;

Процедура ПриСозданииОбъекта()
	
	Идентификатор = Строка(Новый УникальныйИдентификатор());
	ДатаСоздания = ТекущаяУниверсальнаяДата();
	ПоследняяАктивность = ДатаСоздания;
	Параметры = Новый Структура();

	ВремяЖизни = 24 * 60 * 60; // BSLLS:MagicNumber-off

	Лог.Отладка(СтрШаблон("Создан сеанс ID: %1, время жизни: %2 сек.", Идентификатор, ВремяЖизни));

	УстановкаПользовательскихПараметровСеанса();

КонецПроцедуры

Функция ПолучитьИдентификатор() Экспорт
	Возврат Идентификатор;
КонецФункции

Функция ПолучитьВремяЖизни() Экспорт
	Возврат ВремяЖизни;
КонецФункции

Функция ЗначениеПараметра(Ключ) Экспорт
	
	Результат = Неопределено;
	Параметры.Свойство(Ключ, Результат);

	Возврат Результат;

КонецФункции

Процедура УстановитьПараметр(Ключ, Значение) Экспорт
	
	Параметры.Вставить(Ключ, Значение);

КонецПроцедуры

Процедура УстановкаПользовательскихПараметровСеанса()
	
	МенеджерКомпонентов = Приложение.МенеджерКомпонентов();
	Компоненты = МенеджерКомпонентов.Компоненты();

	Для каждого Компонент Из Компоненты Цикл

		МодульКомпонента = Компонент.МодульКомпонента();
		
		Аргументы = Новый Массив();
		Аргументы.Добавить(Новый Структура());

		Если Рефлексия.МетодСуществует(МодульКомпонента, "ПриУстановкеПараметровСеанса") Тогда
			Рефлексия.ВызватьМетод(МодульКомпонента, "ПриУстановкеПараметровСеанса", Аргументы);
		КонецЕсли;

		Для каждого Элемент Из Аргументы[0] Цикл
			Параметры.Вставить(Элемент.Ключ, Элемент.Значение);	
		КонецЦикла;		

	КонецЦикла;

КонецПроцедуры