
Перем МассивКоллекции;
Перем Компонент;
Перем СвойстваПоУмолчанию;
Перем ПрефиксКомпонента;

&Обходимое
Процедура ПриСозданииОбъекта(ОбъектКомпонента = Неопределено, СвойстваМаршрутовПоУмолчанию = Неопределено)

	МассивКоллекции = Новый Массив();
    Компонент = ОбъектКомпонента;
	ПрефиксКомпонента = Ложь;

	Если ТипЗнч(СвойстваМаршрутовПоУмолчанию) = Тип("Структура") Тогда
		СвойстваПоУмолчанию = СвойстваМаршрутовПоУмолчанию;
	Иначе
		СвойстваПоУмолчанию = Новый Структура();
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьИтератор()
    Возврат Новый ИтераторМаршрутов(ЭтотОбъект);
КонецФункции

Функция Количество() Экспорт
    Возврат МассивКоллекции.Количество();
КонецФункции

Функция Получить(Индекс) Экспорт

    Если Индекс <= МассивКоллекции.ВГраница() Тогда
        Возврат МассивКоллекции[Индекс];
    КонецЕсли;
    
    ВызватьИсключение "Индекс выходит за границы коллекции";

КонецФункции

Процедура СвойстваМаршрутовПоУмолчанию(Свойства) Экспорт
	Коллекции.ДополнитьСтруктуру(СвойстваПоУмолчанию, Свойства);
КонецПроцедуры

Процедура ИспользоватьПрефиксКомпонента() Экспорт
	ПрефиксКомпонента = Истина;
КонецПроцедуры

Функция Добавить(Знач Адрес, Знач КлючОбъекта, Знач Статический = Ложь) Экспорт

	Если НЕ СтрНачинаетсяС(Адрес, "/") Тогда
		Лог.Предупреждение(СтрШаблон("Адрес должен начинаться с ""/"", обработчик маршрута %1 по ключу %2, маршрут не добавлен", Адрес, КлючОбъекта));
		Возврат Неопределено;
	КонецЕсли;

    МенеджерОбъектов = Приложение.МенеджерОбъектов();

	Если Компонент <> Неопределено И НЕ Статический Тогда
		КлючОбъекта = СтрШаблон("%1.%2.%3", Компонент.Имя(), "Представления", КлючОбъекта);
		Адрес = ?(ПрефиксКомпонента, СтрШаблон("/%1%2", Компонент.ИмяЛатинское(), Адрес), Адрес);
		Адрес = ?(СтрЗаканчиваетсяНа(Адрес, "/"), Лев(Адрес, СтрДлина(Адрес) - 1), Адрес);
	КонецЕсли;

	Если Статический Тогда
		Тип = Тип("Файл");
	Иначе
		Тип = МенеджерОбъектов.ТипПоКлючу(КлючОбъекта);
	КонецЕсли;

	Если Тип = Неопределено Тогда
		Лог.Предупреждение(СтрШаблон("Не найден обработчик маршрута %1 по ключу %2, маршрут не добавлен", Адрес, КлючОбъекта));
		Возврат Неопределено;
	КонецЕсли;

	Если НЕ АдресСвободен(Адрес) Тогда
		Лог.Предупреждение(СтрШаблон("Добавляемый адрес %1 занят другим обработчиком или файлом, маршрут не добавлен", Адрес));
		Возврат Неопределено;
	КонецЕсли;

    НовыйОбъект = Новый Маршрут(Адрес, КлючОбъекта, Компонент);
    НовыйОбъект.ТипОбъекта(Тип);
    НовыйОбъект.Статический(Статический);
    НовыйОбъект.КоличествоЧастейМаршрута(СтрРазделить(Адрес, "/", Ложь).Количество());
    НовыйОбъект.СодержитПараметры(СтрНайти(Адрес, "<") > 0);

	Для каждого СвойствоПоУмолчанию Из СвойстваПоУмолчанию Цикл
		НовыйОбъект.ДобавитьСвойство(СвойствоПоУмолчанию.Ключ, СвойствоПоУмолчанию.Значение);
	КонецЦикла;

	Если Компонент <> Неопределено Тогда
		ШаблонТекста = ?(Статический, "Добавлен маршрут %1, путь статического файла: %2", "Добавлен маршрут %1, ключ объекта обработчика: %2");
		Лог.Отладка(СтрШаблон(ШаблонТекста, Адрес, КлючОбъекта));
	КонецЕсли;

	МассивКоллекции.Добавить(НовыйОбъект);

	Возврат НовыйОбъект;

КонецФункции

Функция НайтиПоИмени(Имя) Экспорт
	
    НайденныйМаршрут = Неопределено;

    Для каждого Маршрут Из МассивКоллекции Цикл
        Если Маршрут.Имя() = Имя Тогда
            НайденныйМаршрут = Маршрут;
        КонецЕсли;
    КонецЦикла;

	Возврат НайденныйМаршрут;

КонецФункции

Функция НайтиПоАресу(Адрес) Экспорт
	
	// Разбиваем адрес на части
	ЧастиМаршрута = СтрРазделить(Адрес, "/", Ложь);
	КоличествоЧастейМаршрута = ЧастиМаршрута.Количество();

	// Ищем маршруты с таким же количеством частей
    НайденныеМаршруты = Новый Массив();

    Для каждого Маршрут Из МассивКоллекции Цикл
        Если Маршрут.КоличествоЧастейМаршрута() = КоличествоЧастейМаршрута Тогда
            НайденныеМаршруты.Добавить(Маршрут);
        КонецЕсли;
    КонецЦикла;
	
	Если НЕ НайденныеМаршруты.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Для каждого найденного маршрута проверяем совпадение частей
	Для Каждого Маршрут Из НайденныеМаршруты Цикл

		ЧастиНайденногоМаршрута = СтрРазделить(Маршрут.Адрес(), "/", Ложь);
		СовпаденийЧастей = 0;
		
		Для Индекс = 0 По КоличествоЧастейМаршрута - 1 Цикл
			ЧастьТекущегоМаршрута = ЧастиМаршрута[Индекс];
			ЧастьНайденногоМаршрута = ЧастиНайденногоМаршрута[Индекс];
			
			Если ЧастьТекущегоМаршрута = ЧастьНайденногоМаршрута Тогда
				СовпаденийЧастей = СовпаденийЧастей + 1;
				Продолжить;
			КонецЕсли;
			
			// Проверяем параметризованные части
			Если СтрНачинаетсяС(ЧастьНайденногоМаршрута, "<") Тогда
				ДанныеЧасти = ДанныеЧастиМаршрутаПараметром(ЧастьНайденногоМаршрута);
				
				Если ДанныеЧасти = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				// Проверяем соответствие типа параметра
				Если ДанныеЧасти.Тип = Тип("Число") Тогда
					Попытка
						ЗначениеЧисло = Число(ЧастьТекущегоМаршрута);
						Если ЗначениеЧисло <> 0 Тогда
							СовпаденийЧастей = СовпаденийЧастей + 1;
						КонецЕсли;
					Исключение
						Продолжить;
					КонецПопытки;
				ИначеЕсли ДанныеЧасти.Тип = Тип("Строка") Тогда
					СовпаденийЧастей = СовпаденийЧастей + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Если все части совпали - возвращаем найденный маршрут
		Если СовпаденийЧастей = КоличествоЧастейМаршрута Тогда
			Возврат Маршрут;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДанныеЧастиМаршрутаПараметром(Знач ЧастьМаршрута) Экспорт
	
	Если НЕ СтрНайти(ЧастьМаршрута, ":") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ЧастьМаршрута = СтрЗаменить(СтрЗаменить(ЧастьМаршрута, "<", ""), ">", "");
	МассивРазделения = СтрРазделить(ЧастьМаршрута, ":", Ложь);
	
	Попытка
		Возврат Новый Структура("Тип, ИмяПараметра", Тип(МассивРазделения[0]), МассивРазделения[1]);
	Исключение
		Лог.Ошибка(СтрШаблон("В части %1 маршрута ошибка: %2", ЧастьМаршрута, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		Возврат Неопределено;
	КонецПопытки;

КонецФункции

Функция АдресСвободен(Адрес)
	
    НайденныеМаршруты = Новый Массив();

    Для каждого Маршрут Из МассивКоллекции Цикл
        Если Маршрут.Адрес() = Адрес Тогда
            НайденныеМаршруты.Добавить(Маршрут);
        КонецЕсли;
    КонецЦикла;

	Возврат НЕ НайденныеМаршруты.Количество();

КонецФункции