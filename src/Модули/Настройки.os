
#Использовать fs
#Использовать json

#Область ОписаниеПеременных

// Структура содержащее основные настройки приложения
Перем НастройкиПриложения;
// Структура содержащее настройки каждого компонента
Перем НастройкиКомпонентов;
// Строка содержит путь к json файлу настроек
Перем ПутьКФайлуНастроек;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура Инициализировать(ОсновныеНастройки) Экспорт
	
	КаталогПриложения = Служебное.КаталогПриложения();
	ПутьКФайлуНастроек = ОбъединитьПути(КаталогПриложения, "settings.json");
	НастройкиПриложения = ОсновныеНастройки;

	ОбновитьНастройки();

КонецПроцедуры

Процедура ДобавитьНастройкиКомпонента(ИмяКомпонента, СтруктураНастроек) Экспорт

	НастройкиКомпонентов.Вставить(ИмяКомпонента, СтруктураНастроек);

КонецПроцедуры

// Устанавливает значение по ключу
//
// Параметры:
//	Ключ - Строка - Имя свойств в CamelCase нотации разделенные ".", например Приложение.РежимРазработки
//	Значение - Произвольно - Любое значение устанавлемое по умолчанию
Процедура Установить(Ключ, Значение) Экспорт
	
	СтруктураНастройки = СтруктураНастройкиПоКлючу(Ключ);
	ИмяКлючаКонечногоЗначения = Прав(Ключ, СтрДлина(Ключ) - СтрНайти(Ключ, ".", НаправлениеПоиска.СКонца));

	Если СтруктураНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтруктураНастройки.Вставить(ИмяКлючаКонечногоЗначения, Значение);

	СохранитьНастройки();

КонецПроцедуры

// Ищет значение свойства по ключу
//
// Параметры:
//	Ключ - Строка - Имя свойства
//
// Возвращаемое значение:
//	Произвольно - значение хранимое в свойстве
Функция Получить(Ключ) Экспорт
	
	СтруктураНастройки = СтруктураНастройкиПоКлючу(Ключ);
	ИмяКлючаКонечногоЗначения = Прав(Ключ, СтрДлина(Ключ) - СтрНайти(Ключ, ".", НаправлениеПоиска.СКонца));

	Если СтруктураНастройки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат СтруктураНастройки[ИмяКлючаКонечногоЗначения];

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СохранитьНастройки()
	
	ФайлНастроек = Новый ТекстовыйДокумент();
	ПарсерJSON = Новый ПарсерJSON();
	СериализованныеДанные = ПарсерJSON.ЗаписатьJSON(ОбщаяСтруктураНастроек());
	ФайлНастроек.УстановитьТекст(СериализованныеДанные);
	ФайлНастроек.Записать(ПутьКФайлуНастроек);

КонецПроцедуры

Процедура ОбновитьНастройки()
	
	ФайлНастроек = Новый ТекстовыйДокумент();
	ПарсерJSON = Новый ПарсерJSON();
	СохраненнаяСтруктура = Неопределено;

	Если НЕ ФС.Существует(ПутьКФайлуНастроек) Тогда
		ФайлНастроек.Записать(ПутьКФайлуНастроек);
	Иначе

		ФайлНастроек.Прочитать(ПутьКФайлуНастроек);
		СодержимоеФайла = ФайлНастроек.ПолучитьТекст();

		Попытка
			СохраненнаяСтруктура = ПарсерJSON.ПрочитатьJSON(СодержимоеФайла, Истина, Ложь, Истина);
		Исключение // BSLLS:MissingCodeTryCatchEx-off
			// ПарсерJSON выкидывает ошибку, по этому при не удаче возвращаем файл в исходное состояние, изменение свойств не требуется
		КонецПопытки;

	КонецЕсли;

	СтруктураНастроек = ОбщаяСтруктураНастроек();

	Если СохраненнаяСтруктура <> Неопределено Тогда
		СтруктураНастроек = ПривестиСтруктуруНастроек(СтруктураНастроек, СохраненнаяСтруктура);
	КонецЕсли;
		
	НастройкиПриложения = СтруктураНастроек.Приложение;
	НастройкиКомпонентов = СтруктураНастроек.Компоненты;

	СериализованныеДанные = ПарсерJSON.ЗаписатьJSON(СтруктураНастроек);

	ФайлНастроек.УстановитьТекст(СериализованныеДанные);
	ФайлНастроек.Записать(ПутьКФайлуНастроек);

КонецПроцедуры

Функция ОбщаяСтруктураНастроек()
	Возврат Новый Структура("Приложение, Компоненты", НастройкиПриложения, НастройкиКомпонентов);
КонецФункции

Функция ПривестиСтруктуруНастроек(ОсновнаяСтруктура, СравниваемаяСтруктура)
    
    // Создаем новую структуру для объединения
    НоваяСтруктура = Новый Структура;
    
    // Перебираем ключи первой структуры
    Для Каждого КлючЗначение Из ОсновнаяСтруктура Цикл
        
		Ключ = КлючЗначение.Ключ;

        // Проверяем, есть ли такой ключ во второй структуре
        Если СравниваемаяСтруктура.Свойство(Ключ) Тогда
            
            // Если ключи совпадают и оба значения являются структурами, рекурсивно вызываем функцию для объединения вложенных структур
            Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура") И ТипЗнч(СравниваемаяСтруктура[Ключ]) = Тип("Структура") Тогда
                НоваяСтруктура.Вставить(Ключ, ПривестиСтруктуруНастроек(КлючЗначение.Значение, СравниваемаяСтруктура[Ключ]));
            Иначе
                // Иначе просто копируем значение из первой структуры
                НоваяСтруктура.Вставить(Ключ, СравниваемаяСтруктура[Ключ]);
            КонецЕсли;
        
		Иначе
			// Иначе просто копируем ключ и значение из первой структуры
			НоваяСтруктура.Вставить(Ключ, КлючЗначение.Значение);
        КонецЕсли;
        
    КонецЦикла;
        
    // Возвращаем объединенную структуру
    Возврат НоваяСтруктура;
    
КонецФункции

Функция СтруктураНастройкиПоКлючу(Ключ) // BSLLS:CognitiveComplexity-off

	МассивКлючей = СтрРазделить(Ключ, ".");
	ОбщаяСтруктура = ОбщаяСтруктураНастроек();
	ОбходимаяСтруктура = ОбщаяСтруктура;
	ТекущаяСтруктура = Неопределено;
	Индекс = 0;

	Для каждого Элемент Из МассивКлючей Цикл
		
		ОбходимаяСтруктура.Свойство(Элемент, ОбходимаяСтруктура);

		Если ТипЗнч(ОбходимаяСтруктура) <> Тип("Структура") И Индекс <> МассивКлючей.Количество() - 1 Тогда
			ТекущаяСтруктура = Неопределено;
			Прервать;
		ИначеЕсли Индекс = МассивКлючей.Количество() - 1 Тогда
			Прервать;
		Иначе
			ТекущаяСтруктура = ОбходимаяСтруктура;
		КонецЕсли;

		Индекс = Индекс + 1;

	КонецЦикла;

	Возврат ТекущаяСтруктура;

КонецФункции

#КонецОбласти

НастройкиКомпонентов = Новый Структура();