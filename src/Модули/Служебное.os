
Перем Рефлектор;
Перем КаталогБиблиотеки;
Перем КаталогПриложения;

Функция Рефлектор() Экспорт
	Возврат Рефлектор;
КонецФункции

Функция КаталогБиблиотеки() Экспорт
	Возврат КаталогБиблиотеки;
КонецФункции

Функция КаталогПриложения() Экспорт
	Возврат КаталогПриложения;
КонецФункции

Функция ПодготовитьКлючОбъекта(ФайлСкрипта, КорневойПуть) Экспорт

	ОбъектПриложения = СтрНачинаетсяС(ФайлСкрипта.ПолноеИмя, КаталогПриложения);

	Если ОбъектПриложения Тогда
		СтрокаКлюча = СтрЗаменить(ФайлСкрипта.ПолноеИмя, КаталогПриложения, "");
	Иначе
		СтрокаКлюча = СтрЗаменить(ФайлСкрипта.ПолноеИмя, КаталогБиблиотеки, "");
	КонецЕсли;

	Возврат СтрЗаменить(СтрЗаменить(СтрЗаменить(Прав(СтрокаКлюча, СтрДлина(СтрокаКлюча) - 1), ".os", ""), "/", "."), "\", ".");
	
КонецФункции

// Параметры:
//   Строка - Строка - Проверяемая строка
//   ДопустимыеСимволы - Массив - Массив допустимых кодов символов
//
// Возвращаемое значение:
//		Истина - строка состоит из допустимых символов
//		Ложь - в строке встречаются недопустимые символы
//
// Описание:
//		Строка проверяется на наличие только русских и латинских букв;
//		кроме того,	допускаются дефис, "Ё", "ё".
//
Функция СодержитНедопустимыеСимволы(Знач Строка, Знач ДопустимыеСимволы) Экспорт
	
	Строка = СокрЛП(Строка);
	КоличествоСимволов = СтрДлина(Строка);
	
	Если КоличествоСимволов = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Сч = 1 По КоличествоСимволов Цикл
		КодСимвола = КодСимвола(Сред(Строка, Сч, 1));
		Если ДопустимыеСимволы.Найти(КодСимвола) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет содержит ли строка хотя бы один символ кириллицы
//
// Параметры:
//   Строка - Строка - Проверяемая строка
//
// Возвращаемое значение:
//   Булево - Истина, если строка содержит хотя бы один символ кириллицы,
//           Ложь - в противном случае
//
Функция СодержитСимволыКириллицы(Знач Строка) Экспорт
	
	// Коды символов кириллицы
	ДопустимыеСимволы = Новый Массив;
	// Добавляем Ё и ё
	ДопустимыеСимволы.Добавить(168);
	ДопустимыеСимволы.Добавить(184);
	// Добавляем все символы кириллицы
	Для Код = 192 По 255 Цикл
		ДопустимыеСимволы.Добавить(Код);
	КонецЦикла;
	
	Строка = СокрЛП(Строка);
	КоличествоСимволов = СтрДлина(Строка);
	
	Для Сч = 1 По КоличествоСимволов Цикл
		КодСимвола = КодСимвола(Сред(Строка, Сч, 1));
		Если ДопустимыеСимволы.Найти(КодСимвола) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет соответствует ли строка CamelCase нотации с допустимыми символами
// 
// Параметры:
//   Строка - Строка - Проверяемая строка
//   ДопуститьКириллицу - Булево - Если Истина, то допускаются символы кириллицы. По умолчанию Ложь
//
// Возвращаемое значение:
//   Булево - Истина, если строка соответствует CamelCase нотации
//
Функция СоответствуетCamelCase(Знач Строка, Знач ДопуститьКириллицу = Ложь) Экспорт
	
	// Формируем массив допустимых символов
	ДопустимыеСимволы = Новый Массив;
	
	// Добавляем латинские буквы
	Для Код = 65 По 90 Цикл // A-Z
		ДопустимыеСимволы.Добавить(Код);
	КонецЦикла;

	Для Код = 97 По 122 Цикл // a-z
		ДопустимыеСимволы.Добавить(Код);
	КонецЦикла;
	
	Если ДопуститьКириллицу Тогда

		// Добавляем Ё и ё
		ДопустимыеСимволы.Добавить(168);
		ДопустимыеСимволы.Добавить(184);

		// Добавляем все русские буквы
		Для Код = 192 По 255 Цикл
			ДопустимыеСимволы.Добавить(Код);
		КонецЦикла;

	КонецЕсли;
	
	// Проверяем на недопустимые символы
	Если СодержитНедопустимыеСимволы(Строка, ДопустимыеСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем что строка не пустая
	Если ПустаяСтрока(Строка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Первый символ должен быть заглавным
	ПервыйКод = КодСимвола(Лев(Строка, 1));

	Если ДопуститьКириллицу Тогда
		Если ПервыйКод < 65 ИЛИ (ПервыйКод > 90 И ПервыйКод < 192 И ПервыйКод <> 168) Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если ПервыйКод < 65 ИЛИ ПервыйКод > 90 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
Рефлектор = Новый Рефлектор();
ТекущийСценарий = ТекущийСценарий();
КаталогБиблиотеки = Лев(ТекущийСценарий.Каталог, СтрНайти(ТекущийСценарий.Каталог, "onecore", НаправлениеПоиска.СКонца) - 1) + "onecore";
КаталогПриложения = ТекущийКаталог();