#Использовать strings

// Сериализовать JSON.
//
// Параметры:
//  Данные - Произвольный - Данные для сериализации
//
// Возвращаемое значение:
//  Строка - Сериализовать JSON
Функция СериализоватьJSON(Данные) Экспорт

	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);

	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, Данные);

	Возврат ЗаписьJSON.Закрыть();

КонецФункции

// Десериализовать JSON.
//
// Параметры:
//  СтрокаJSON - Строка - Строка JSON
//  ИменаПолейДат - Массив, Строка - Массив строк, или строка через запятую содержащий имена полей с датами
//  ПарсингВСоответствие - Булево - Читает полученный json в соответствие
//
// Возвращаемое значение:
//  Структура, Соответствие - Десериализованный JSON в данные поддерживаемые 1с
Функция ДесериализоватьJSON(СтрокаJSON, ИменаПолейДат = Неопределено, ПарсингВСоответствие = Истина) Экспорт

	МассивПолейДат = Новый Массив();

	Если ТипЗнч(ИменаПолейДат) = Тип("Строка") Тогда
		МассивПолейДат = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(ИменаПолейДат, ",", Истина, Истина);
	ИначеЕсли ТипЗнч(ИменаПолейДат) = Тип("Массив") Тогда
		Для Каждого Элемент Из ИменаПолейДат Цикл
			МассивПолейДат.Добавить(Элемент);
		КонецЦикла;
	Иначе
		МассивПолейДат = Неопределено;
	КонецЕсли;

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	РезультатЧтения = ПрочитатьJSON(ЧтениеJSON, ПарсингВСоответствие, МассивПолейДат);
	ЧтениеJSON.Закрыть();

	Возврат РезультатЧтения;

КонецФункции

Функция ДатуВTimestamp(Знач Дата) Экспорт
	Возврат Формат(Число(Дата - Дата("19700101")), "ЧН=0; ЧГ=0");
КонецФункции     

Функция TimestampВДату(Знач Дата) Экспорт
	Попытка
		Возврат Дата("19700101")+?(ТипЗнч(Дата) = Тип("Строка"), Число(Дата), Дата);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

// Заменяет русские символы на английские и обратно
Функция ЗаменитьСимволы(Знач ИсходнаяСтрока, Знач ЗаменятьНаЛатиницу = Истина) Экспорт
	
	// Словарь соответствия русских и латинских символов
	СоответствиеСимволов = Новый Соответствие;
	СоответствиеСимволов.Вставить("а", "a");
	СоответствиеСимволов.Вставить("б", "b");
	СоответствиеСимволов.Вставить("в", "v");
	СоответствиеСимволов.Вставить("г", "g");
	СоответствиеСимволов.Вставить("д", "d");
	СоответствиеСимволов.Вставить("е", "e");
	СоответствиеСимволов.Вставить("ё", "ë");
	СоответствиеСимволов.Вставить("ж", "ž");
	СоответствиеСимволов.Вставить("з", "z");
	СоответствиеСимволов.Вставить("и", "i");
	СоответствиеСимволов.Вставить("й", "j");
	СоответствиеСимволов.Вставить("к", "k");
	СоответствиеСимволов.Вставить("л", "l");
	СоответствиеСимволов.Вставить("м", "m");
	СоответствиеСимволов.Вставить("н", "n");
	СоответствиеСимволов.Вставить("о", "o");
	СоответствиеСимволов.Вставить("п", "p");
	СоответствиеСимволов.Вставить("р", "r");
	СоответствиеСимволов.Вставить("с", "s");
	СоответствиеСимволов.Вставить("т", "t");
	СоответствиеСимволов.Вставить("у", "u");
	СоответствиеСимволов.Вставить("ф", "f");
	СоответствиеСимволов.Вставить("х", "h");
	СоответствиеСимволов.Вставить("ц", "c");
	СоответствиеСимволов.Вставить("ч", "č");
	СоответствиеСимволов.Вставить("ш", "š");
	СоответствиеСимволов.Вставить("щ", "ŝ");
	СоответствиеСимволов.Вставить("ъ", "=");
	СоответствиеСимволов.Вставить("ы", "y");
	СоответствиеСимволов.Вставить("ь", "+");
	СоответствиеСимволов.Вставить("э", "è");
	СоответствиеСимволов.Вставить("ю", "û");
	СоответствиеСимволов.Вставить("я", "â");
	
	РезультирующаяСтрока = "";
	
	Для Счетчик = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, Счетчик, 1);
		СимволВНижнемРегистре = НРег(ТекущийСимвол);
		
		Если ЗаменятьНаЛатиницу Тогда
			ЗамененныйСимвол = СоответствиеСимволов.Получить(СимволВНижнемРегистре);
			Если ЗамененныйСимвол = Неопределено Тогда
				РезультирующаяСтрока = РезультирующаяСтрока + ТекущийСимвол;
			Иначе
				Если ТекущийСимвол = СимволВНижнемРегистре Тогда
					РезультирующаяСтрока = РезультирующаяСтрока + ЗамененныйСимвол;
				Иначе
					РезультирующаяСтрока = РезультирующаяСтрока + ВРег(ЗамененныйСимвол);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЗамененныйСимвол = "";
			Для Каждого КлючИЗначение Из СоответствиеСимволов Цикл
				Если КлючИЗначение.Значение = СимволВНижнемРегистре Тогда
					ЗамененныйСимвол = КлючИЗначение.Ключ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗамененныйСимвол = "" Тогда
				РезультирующаяСтрока = РезультирующаяСтрока + ТекущийСимвол;
			Иначе
				Если ТекущийСимвол = СимволВНижнемРегистре Тогда
					РезультирующаяСтрока = РезультирующаяСтрока + ЗамененныйСимвол;
				Иначе
					РезультирующаяСтрока = РезультирующаяСтрока + ВРег(ЗамененныйСимвол);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультирующаяСтрока;
	
КонецФункции

// Функция для разбора тела запроса типа "application/x-www-form-urlencoded"
Функция РазобратьТелоЗапросаAXWWWFU(ТелоЗапроса, ЗаменятьСимволыКлюча = Истина) Экспорт
	
	// Создаем соответствие для хранения результатов
	Результат = Новый Соответствие();
	
	// Разбиваем строку запроса на пары ключ-значение
	МассивПар = СтрРазделить(ТелоЗапроса, "&", Ложь);
	
	Для Каждого Пара Из МассивПар Цикл
		// Разделяем каждую пару на ключ и значение
		РазделеннаяПара = СтрРазделить(Пара, "=", Ложь);
		
		Если РазделеннаяПара.Количество() = 2 Тогда
			Ключ = РаскодироватьСтроку(РазделеннаяПара[0], СпособКодированияСтроки.URLВКодировкеURL);
			Значение = РаскодироватьСтроку(РазделеннаяПара[1], СпособКодированияСтроки.URLВКодировкеURL);
			
			// Добавляем пару ключ-значение в соответствие
			ИмяПараметра = ?(ЗаменятьСимволыКлюча, ЗаменитьСимволы(Ключ, Ложь), Ключ);
			Результат.Вставить(ИмяПараметра, Значение);

		КонецЕсли;

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
